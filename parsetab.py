
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 's_primnonassocEQUALNOT_EQUALGREATER_EQUALLESSER_EQUALGREATERLESSERleftPLUSMINUSleftMULDIVrightUMINUSAMPERSAND AND ASSIGN BOOL BREAK CHAR CHARACTER COLON COMMA COMMENT CONST DECIMAL DECREMENT DIV DIV_ASSIGN DO DOUBLE ELSE EQUAL FALSE FLOAT FOR GREATER GREATER_EQUAL ID IF INCREMENT INT INTEGER LESSER LESSER_EQUAL LONG L_BRACE L_BRACKET L_SQUARE_BRACKET MINUS MINUS_ASSIGN MOD MOD_ASSIGN MUL MUL_ASSIGN NEGATION NOT_EQUAL OR PLUS PLUS_ASSIGN PREPROCESSOR_LINE PRINTF QUESTION_MARK RETURN R_BRACE R_BRACKET R_SQUARE_BRACKET SCANF SEMICOLON STRING TRUE VOID WHILEs_prim : programprogram : program_component\n               | program_component programprogram_component : declaration_statement\n                         | function_definition_statement\n                         | COMMENT\n                         | PREPROCESSOR_LINEstatement : any_statement\n                 | COMMENT\n                 | SEMICOLONstatements : statement\n                  | statement statementsopt_statements : statements\n                      | emptystatements_block : L_BRACE opt_statements R_BRACEany_statement : declaration_statement\n                     | assign_statement\n                     | function_statement\n                     | return_statement\n                     | while_loop_statement\n                     | do_while_loop_statement\n                     | break_statement\n                     | for_loop_statement\n                     | if_statement opt_else_if_statements opt_else_statement\n                     | print_statement\n                     | scan_statementdeclaration_statement : opt_const type ID opt_array_mark\n                             | opt_const type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLONassign_statement :  assign_expression SEMICOLONfunction_statement  : function_expression SEMICOLONreturn_statement : RETURN value_expression SEMICOLONbreak_statement : BREAK SEMICOLONfunction_definition_statement : type ID L_BRACKET opt_args R_BRACKET statements_blockwhile_loop_statement : WHILE L_BRACKET logical_expression R_BRACKET statements_blockdo_while_loop_statement : DO statements_block WHILE L_BRACKET logical_expression  R_BRACKET SEMICOLONfor_loop_statement : FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_blockdecl_stat_or_sem : declaration_statement\n                        | SEMICOLONif_statement : IF L_BRACKET logical_expression R_BRACKET statements_blockelse_statement : ELSE statements_block else_if_statement : ELSE IF L_BRACKET logical_expression R_BRACKET statements_blockelse_if_statements : else_if_statement\n                          | else_if_statement else_if_statementsopt_else_statement : else_statement\n                          | emptyopt_else_if_statements : else_if_statements\n                              | emptyprint_statement : PRINTF L_BRACKET value_expression R_BRACKETscan_statement : SCANF L_BRACKET AMPERSAND ID  R_BRACKETdeclaration_value_expression : value_expression\n                                    | L_BRACE listed_values R_BRACE\n                                    | L_BRACE declaration_value_expression R_BRACEvalue_expression : math_expression\n                        | function_expression\n                        | value\n                        | trinary_mark_expression\n                        | L_BRACKET value_expression R_BRACKETopt_value_expression : value_expression\n                            | emptymath_expression : L_BRACKET math_expression R_BRACKET\n                       | MINUS math_expression %prec UMINUS\n                       | MINUS value %prec UMINUS\n                       | value math_op valuelogical_expression : logical_expression bool_op logical_expression\n                          | NEGATION logical_expression\n                          | value_expression comparison_op value_expressionfunction_expression : ID L_BRACKET opt_listed_values R_BRACKETtrinary_mark_expression : logical_expression QUESTION_MARK value_expression COLON value_expressionassign_expression : ID assign_op value_expression\n                         | unary_op ID\n                         | ID unary_opopt_logical_expression : logical_expression\n                              | emptyopt_assign_expression : assign_expression\n                             | emptytype : INT\n            | FLOAT\n            | DOUBLE\n            | CHAR\n            | BOOL\n            | LONG\n            | VOIDvalue : INTEGER\n             | DECIMAL\n             | CHARACTER\n             | STRING\n             | TRUE\n             | FALSE\n             | ID\n             | ID L_SQUARE_BRACKET value_expression  R_SQUARE_BRACKETlisted_values : value_expression COMMA value_expression\n                     | value_expression COMMA listed_valuesmath_op : PLUS\n               | MINUS\n               | MUL\n               | DIV\n               | MODunary_op : INCREMENT\n                | DECREMENTbool_op : AND\n               | ORcomparison_op : EQUAL\n                     | NOT_EQUAL\n                     | GREATER\n                     | GREATER_EQUAL\n                     | LESSER\n                     | LESSER_EQUALassign_op : ASSIGN\n                 | PLUS_ASSIGN\n                 | MINUS_ASSIGN\n                 | MUL_ASSIGN\n                 | DIV_ASSIGN\n                 | MOD_ASSIGNarray_mark : L_SQUARE_BRACKET opt_value_expression  R_SQUARE_BRACKET opt_const : CONST\n                 | emptyopt_array_mark : array_mark\n                      | emptyopt_listed_values :  listed_values\n                         | emptyargs : type ID\n            | type ID COMMA argsopt_args : args\n                | emptyempty : '
    
_lr_action_items = {'COMMENT':([0,3,4,5,6,7,22,24,25,26,56,85,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[6,6,-4,-5,-6,-7,-125,-27,-117,-118,-114,-33,110,-28,110,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'PREPROCESSOR_LINE':([0,3,4,5,6,7,22,24,25,26,56,85,87,143,],[7,7,-4,-5,-6,-7,-125,-27,-117,-118,-114,-33,-28,-15,]),'CONST':([0,3,4,5,6,7,22,24,25,26,56,85,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[10,10,-4,-5,-6,-7,-125,-27,-117,-118,-114,-33,10,-28,10,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,10,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'INT':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[12,12,-4,-5,-6,-7,12,-115,-116,-125,12,-27,-117,-118,-114,12,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'FLOAT':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[13,13,-4,-5,-6,-7,13,-115,-116,-125,13,-27,-117,-118,-114,13,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'DOUBLE':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[14,14,-4,-5,-6,-7,14,-115,-116,-125,14,-27,-117,-118,-114,14,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'CHAR':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[15,15,-4,-5,-6,-7,15,-115,-116,-125,15,-27,-117,-118,-114,15,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'BOOL':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[16,16,-4,-5,-6,-7,16,-115,-116,-125,16,-27,-117,-118,-114,16,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'LONG':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[17,17,-4,-5,-6,-7,17,-115,-116,-125,17,-27,-117,-118,-114,17,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'VOID':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,56,84,85,86,87,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,164,172,173,174,176,179,188,196,199,202,203,210,211,213,],[18,18,-4,-5,-6,-7,18,-115,-116,-125,18,-27,-117,-118,-114,18,-33,-125,-28,-116,-125,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-125,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'$end':([1,2,3,4,5,6,7,19,22,24,25,26,56,85,87,143,],[0,-1,-2,-4,-5,-6,-7,-3,-125,-27,-117,-118,-114,-33,-28,-15,]),'ID':([9,12,13,14,15,16,17,18,20,22,24,25,26,27,28,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,134,135,136,139,142,143,145,146,147,148,150,152,153,154,155,156,157,158,159,161,163,165,166,172,173,174,176,179,182,183,184,187,188,189,191,196,199,201,202,203,210,211,213,],[21,-76,-77,-78,-79,-80,-81,-82,22,-125,-27,-117,-118,42,51,42,42,75,42,42,-114,42,-102,-103,-104,-105,-106,-107,75,-93,-94,-95,-96,-97,75,42,42,42,42,-100,-101,123,-28,123,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,42,168,-98,-99,42,42,-15,-125,-46,-47,-42,42,-108,-109,-110,-111,-112,-113,-29,-30,42,-32,42,42,-24,-44,-45,-43,-31,42,-38,-37,197,-40,42,42,-48,-34,209,-39,-49,-41,-35,-36,]),'L_BRACKET':([21,22,24,25,26,27,32,40,41,42,50,55,56,57,58,59,60,61,62,63,74,76,77,78,79,80,81,87,123,126,127,130,131,132,133,139,142,150,152,153,154,155,156,157,161,165,166,177,181,182,183,184,189,191,],[23,-125,-27,-117,-118,40,40,40,74,76,40,40,-114,40,-102,-103,-104,-105,-106,-107,74,40,40,40,40,-100,-101,-28,76,40,161,164,165,166,167,40,40,40,-108,-109,-110,-111,-112,-113,40,40,40,189,191,40,-38,-37,40,40,]),'L_SQUARE_BRACKET':([22,42,75,],[27,77,77,]),'ASSIGN':([22,24,25,26,56,123,209,],[-125,32,-117,-118,-114,152,152,]),'SEMICOLON':([22,24,25,26,36,37,38,39,42,43,44,45,46,47,48,53,54,56,72,73,75,82,86,87,91,92,93,94,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,124,125,129,135,136,137,138,140,141,143,145,146,147,148,151,158,159,160,163,164,168,171,172,173,174,176,178,179,182,183,184,188,192,193,194,196,199,202,203,205,210,211,213,],[-125,-27,-117,-118,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,87,-50,-114,-61,-62,-89,-65,111,-28,-66,-63,-57,-60,-64,111,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,158,159,163,-98,-99,-51,-52,-67,-90,-15,-125,-46,-47,-42,-71,-29,-30,179,-32,183,-70,-68,-24,-44,-45,-43,-69,-31,-125,-38,-37,-40,201,-72,-73,-48,-34,-39,-49,211,-41,-35,-36,]),'RETURN':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,126,-28,126,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'WHILE':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,162,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,127,-28,127,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,181,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'DO':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,128,-28,128,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'BREAK':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,129,-28,129,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'FOR':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,130,-28,130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'IF':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,149,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,131,-28,131,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,177,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'PRINTF':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,132,-28,132,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'SCANF':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-114,133,-28,133,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'INCREMENT':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,201,202,203,209,210,211,213,],[-125,-27,-117,-118,-114,135,-28,135,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,135,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,135,-39,-49,135,-41,-35,-36,]),'DECREMENT':([22,24,25,26,56,86,87,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,143,145,146,147,148,158,159,163,172,173,174,176,179,188,196,199,201,202,203,209,210,211,213,],[-125,-27,-117,-118,-114,136,-28,136,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,136,-15,-125,-46,-47,-42,-29,-30,-32,-24,-44,-45,-43,-31,-40,-48,-34,136,-39,-49,136,-41,-35,-36,]),'R_BRACE':([22,24,25,26,36,37,38,39,42,43,44,45,46,47,48,56,72,73,75,86,87,88,89,90,92,93,94,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,137,138,140,141,143,144,145,146,147,148,158,159,163,169,170,171,172,173,174,176,179,188,196,199,202,203,210,211,213,],[-125,-27,-117,-118,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,-114,-61,-62,-89,-125,-28,137,138,-50,-63,-57,-60,143,-13,-14,-11,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-125,-25,-26,-51,-52,-67,-90,-15,-12,-125,-46,-47,-42,-29,-30,-32,-91,-92,-68,-24,-44,-45,-43,-31,-40,-48,-34,-39,-49,-41,-35,-36,]),'NEGATION':([22,24,25,26,27,32,40,50,55,56,57,58,59,60,61,62,63,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,50,50,50,50,50,-114,50,-102,-103,-104,-105,-106,-107,50,50,50,50,-100,-101,-28,50,50,50,50,-108,-109,-110,-111,-112,-113,50,50,50,50,-38,-37,50,50,]),'MINUS':([22,24,25,26,27,32,38,40,41,42,43,44,45,46,47,48,50,55,56,57,58,59,60,61,62,63,73,74,75,76,77,78,79,80,81,87,96,126,139,141,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,41,41,66,41,41,-89,-83,-84,-85,-86,-87,-88,41,41,-114,41,-102,-103,-104,-105,-106,-107,66,41,-89,41,41,41,41,-100,-101,-28,66,41,41,-90,41,41,-108,-109,-110,-111,-112,-113,41,41,41,41,-38,-37,41,41,]),'INTEGER':([22,24,25,26,27,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,43,43,43,43,43,43,-114,43,-102,-103,-104,-105,-106,-107,43,-93,-94,-95,-96,-97,43,43,43,43,43,-100,-101,-28,43,43,43,43,-108,-109,-110,-111,-112,-113,43,43,43,43,-38,-37,43,43,]),'DECIMAL':([22,24,25,26,27,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,44,44,44,44,44,44,-114,44,-102,-103,-104,-105,-106,-107,44,-93,-94,-95,-96,-97,44,44,44,44,44,-100,-101,-28,44,44,44,44,-108,-109,-110,-111,-112,-113,44,44,44,44,-38,-37,44,44,]),'CHARACTER':([22,24,25,26,27,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,45,45,45,45,45,45,-114,45,-102,-103,-104,-105,-106,-107,45,-93,-94,-95,-96,-97,45,45,45,45,45,-100,-101,-28,45,45,45,45,-108,-109,-110,-111,-112,-113,45,45,45,45,-38,-37,45,45,]),'STRING':([22,24,25,26,27,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,46,46,46,46,46,46,-114,46,-102,-103,-104,-105,-106,-107,46,-93,-94,-95,-96,-97,46,46,46,46,46,-100,-101,-28,46,46,46,46,-108,-109,-110,-111,-112,-113,46,46,46,46,-38,-37,46,46,]),'TRUE':([22,24,25,26,27,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,47,47,47,47,47,47,-114,47,-102,-103,-104,-105,-106,-107,47,-93,-94,-95,-96,-97,47,47,47,47,47,-100,-101,-28,47,47,47,47,-108,-109,-110,-111,-112,-113,47,47,47,47,-38,-37,47,47,]),'FALSE':([22,24,25,26,27,32,40,41,50,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,74,76,77,78,79,80,81,87,126,139,142,150,152,153,154,155,156,157,161,165,166,182,183,184,189,191,],[-125,-27,-117,-118,48,48,48,48,48,48,-114,48,-102,-103,-104,-105,-106,-107,48,-93,-94,-95,-96,-97,48,48,48,48,48,-100,-101,-28,48,48,48,48,-108,-109,-110,-111,-112,-113,48,48,48,48,-38,-37,48,48,]),'R_BRACKET':([23,29,30,31,36,37,38,39,42,43,44,45,46,47,48,51,70,71,72,73,75,76,82,91,92,93,94,95,97,98,99,103,104,135,136,140,141,151,168,169,170,171,178,180,185,186,197,198,200,201,206,207,208,],[-125,52,-123,-124,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,-121,93,94,-61,-62,-89,-125,-65,-66,-63,-57,-60,94,140,-119,-120,-64,-122,-98,-99,-67,-90,-71,-70,-91,-92,-68,-69,190,195,196,203,204,205,-125,212,-74,-75,]),'R_SQUARE_BRACKET':([27,33,34,35,36,37,38,39,42,43,44,45,46,47,48,72,73,75,92,93,94,101,140,141,171,],[-125,56,-58,-59,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,-61,-62,-89,-63,-57,-60,141,-67,-90,-68,]),'L_BRACE':([32,52,55,128,175,190,195,204,212,],[55,86,55,86,86,86,86,86,86,]),'EQUAL':([34,36,37,38,39,42,43,44,45,46,47,48,54,70,71,72,73,75,83,90,91,92,93,94,100,101,102,140,141,160,169,171,178,186,],[58,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,58,58,-53,-61,-62,-89,58,58,58,-63,-57,-60,58,58,58,-67,-90,58,58,58,58,58,]),'NOT_EQUAL':([34,36,37,38,39,42,43,44,45,46,47,48,54,70,71,72,73,75,83,90,91,92,93,94,100,101,102,140,141,160,169,171,178,186,],[59,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,59,59,-53,-61,-62,-89,59,59,59,-63,-57,-60,59,59,59,-67,-90,59,59,59,59,59,]),'GREATER':([34,36,37,38,39,42,43,44,45,46,47,48,54,70,71,72,73,75,83,90,91,92,93,94,100,101,102,140,141,160,169,171,178,186,],[60,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,60,60,-53,-61,-62,-89,60,60,60,-63,-57,-60,60,60,60,-67,-90,60,60,60,60,60,]),'GREATER_EQUAL':([34,36,37,38,39,42,43,44,45,46,47,48,54,70,71,72,73,75,83,90,91,92,93,94,100,101,102,140,141,160,169,171,178,186,],[61,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,61,61,-53,-61,-62,-89,61,61,61,-63,-57,-60,61,61,61,-67,-90,61,61,61,61,61,]),'LESSER':([34,36,37,38,39,42,43,44,45,46,47,48,54,70,71,72,73,75,83,90,91,92,93,94,100,101,102,140,141,160,169,171,178,186,],[62,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,62,62,-53,-61,-62,-89,62,62,62,-63,-57,-60,62,62,62,-67,-90,62,62,62,62,62,]),'LESSER_EQUAL':([34,36,37,38,39,42,43,44,45,46,47,48,54,70,71,72,73,75,83,90,91,92,93,94,100,101,102,140,141,160,169,171,178,186,],[63,-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,63,63,-53,-61,-62,-89,63,63,63,-63,-57,-60,63,63,63,-67,-90,63,63,63,63,63,]),'COMMA':([36,37,38,39,42,43,44,45,46,47,48,51,72,73,75,90,92,93,94,100,140,141,169,171,],[-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,84,-61,-62,-89,139,-63,-57,-60,139,-67,-90,139,-68,]),'QUESTION_MARK':([36,37,38,39,42,43,44,45,46,47,48,49,72,73,75,82,91,92,93,94,103,140,141,171,180,185,193,198,200,],[-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,78,-61,-62,-89,78,-66,-63,-57,-60,78,-67,-90,-68,78,78,78,78,78,]),'AND':([36,37,38,39,42,43,44,45,46,47,48,49,72,73,75,82,91,92,93,94,103,140,141,171,180,185,193,198,200,],[-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,80,-61,-62,-89,80,-66,-63,-57,-60,80,-67,-90,-68,80,80,80,80,80,]),'OR':([36,37,38,39,42,43,44,45,46,47,48,49,72,73,75,82,91,92,93,94,103,140,141,171,180,185,193,198,200,],[-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,81,-61,-62,-89,81,-66,-63,-57,-60,81,-67,-90,-68,81,81,81,81,81,]),'COLON':([36,37,38,39,42,43,44,45,46,47,48,72,73,75,92,93,94,102,140,141,171,],[-53,-54,-55,-56,-89,-83,-84,-85,-86,-87,-88,-61,-62,-89,-63,-57,-60,142,-67,-90,-68,]),'PLUS':([38,42,43,44,45,46,47,48,73,75,96,141,],[65,-89,-83,-84,-85,-86,-87,-88,65,-89,65,-90,]),'MUL':([38,42,43,44,45,46,47,48,73,75,96,141,],[67,-89,-83,-84,-85,-86,-87,-88,67,-89,67,-90,]),'DIV':([38,42,43,44,45,46,47,48,73,75,96,141,],[68,-89,-83,-84,-85,-86,-87,-88,68,-89,68,-90,]),'MOD':([38,42,43,44,45,46,47,48,73,75,96,141,],[69,-89,-83,-84,-85,-86,-87,-88,69,-89,69,-90,]),'ELSE':([120,143,145,146,147,148,176,202,210,],[149,-15,175,-46,-47,149,-43,-39,-41,]),'PLUS_ASSIGN':([123,209,],[153,153,]),'MINUS_ASSIGN':([123,209,],[154,154,]),'MUL_ASSIGN':([123,209,],[155,155,]),'DIV_ASSIGN':([123,209,],[156,156,]),'MOD_ASSIGN':([123,209,],[157,157,]),'AMPERSAND':([167,],[187,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s_prim':([0,],[1,]),'program':([0,3,],[2,19,]),'program_component':([0,3,],[3,3,]),'declaration_statement':([0,3,86,108,164,],[4,4,112,112,184,]),'function_definition_statement':([0,3,],[5,5,]),'opt_const':([0,3,86,108,164,],[8,8,8,8,8,]),'type':([0,3,8,23,84,],[9,9,20,28,28,]),'empty':([0,3,22,23,27,76,86,108,120,145,164,182,201,],[11,11,26,31,35,99,107,11,147,174,11,194,208,]),'opt_array_mark':([22,],[24,]),'array_mark':([22,],[25,]),'opt_args':([23,],[29,]),'args':([23,84,],[30,104,]),'opt_value_expression':([27,],[33,]),'value_expression':([27,32,40,50,55,57,76,77,78,79,126,139,142,150,161,165,166,182,189,191,],[34,54,70,83,90,91,100,101,102,83,160,169,171,178,83,83,186,83,83,83,]),'math_expression':([27,32,40,41,50,55,57,74,76,77,78,79,126,139,142,150,161,165,166,182,189,191,],[36,36,71,72,36,36,36,95,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'function_expression':([27,32,40,50,55,57,76,77,78,79,86,108,126,139,142,150,161,165,166,182,189,191,],[37,37,37,37,37,37,37,37,37,37,125,125,37,37,37,37,37,37,37,37,37,37,]),'value':([27,32,40,41,50,55,57,64,74,76,77,78,79,126,139,142,150,161,165,166,182,189,191,],[38,38,38,73,38,38,38,92,96,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'trinary_mark_expression':([27,32,40,50,55,57,76,77,78,79,126,139,142,150,161,165,166,182,189,191,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'logical_expression':([27,32,40,50,55,57,76,77,78,79,126,139,142,150,161,165,166,182,189,191,],[49,49,49,82,49,49,49,49,49,103,49,49,49,49,180,185,49,193,198,200,]),'declaration_value_expression':([32,55,],[53,89,]),'comparison_op':([34,54,70,83,90,91,100,101,102,160,169,171,178,186,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'math_op':([38,73,96,],[64,64,64,]),'bool_op':([49,82,103,180,185,193,198,200,],[79,79,79,79,79,79,79,79,]),'statements_block':([52,128,175,190,195,204,212,],[85,162,188,199,202,210,213,]),'listed_values':([55,76,139,],[88,98,170,]),'opt_listed_values':([76,],[97,]),'opt_statements':([86,],[105,]),'statements':([86,108,],[106,144,]),'statement':([86,108,],[108,108,]),'any_statement':([86,108,],[109,109,]),'assign_statement':([86,108,],[113,113,]),'function_statement':([86,108,],[114,114,]),'return_statement':([86,108,],[115,115,]),'while_loop_statement':([86,108,],[116,116,]),'do_while_loop_statement':([86,108,],[117,117,]),'break_statement':([86,108,],[118,118,]),'for_loop_statement':([86,108,],[119,119,]),'if_statement':([86,108,],[120,120,]),'print_statement':([86,108,],[121,121,]),'scan_statement':([86,108,],[122,122,]),'assign_expression':([86,108,201,],[124,124,207,]),'unary_op':([86,108,123,201,209,],[134,134,151,134,151,]),'opt_else_if_statements':([120,],[145,]),'else_if_statements':([120,148,],[146,176,]),'else_if_statement':([120,148,],[148,148,]),'assign_op':([123,209,],[150,150,]),'opt_else_statement':([145,],[172,]),'else_statement':([145,],[173,]),'decl_stat_or_sem':([164,],[182,]),'opt_logical_expression':([182,],[192,]),'opt_assign_expression':([201,],[206,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s_prim","S'",1,None,None,None),
  ('s_prim -> program','s_prim',1,'p_s_prim','main.py',180),
  ('program -> program_component','program',1,'p_program','main.py',185),
  ('program -> program_component program','program',2,'p_program','main.py',186),
  ('program_component -> declaration_statement','program_component',1,'p_program_component','main.py',194),
  ('program_component -> function_definition_statement','program_component',1,'p_program_component','main.py',195),
  ('program_component -> COMMENT','program_component',1,'p_program_component','main.py',196),
  ('program_component -> PREPROCESSOR_LINE','program_component',1,'p_program_component','main.py',197),
  ('statement -> any_statement','statement',1,'p_statement','main.py',204),
  ('statement -> COMMENT','statement',1,'p_statement','main.py',205),
  ('statement -> SEMICOLON','statement',1,'p_statement','main.py',206),
  ('statements -> statement','statements',1,'p_statements','main.py',214),
  ('statements -> statement statements','statements',2,'p_statements','main.py',215),
  ('opt_statements -> statements','opt_statements',1,'p_opt_statements','main.py',223),
  ('opt_statements -> empty','opt_statements',1,'p_opt_statements','main.py',224),
  ('statements_block -> L_BRACE opt_statements R_BRACE','statements_block',3,'p_statements_block','main.py',229),
  ('any_statement -> declaration_statement','any_statement',1,'p_any_statement','main.py',234),
  ('any_statement -> assign_statement','any_statement',1,'p_any_statement','main.py',235),
  ('any_statement -> function_statement','any_statement',1,'p_any_statement','main.py',236),
  ('any_statement -> return_statement','any_statement',1,'p_any_statement','main.py',237),
  ('any_statement -> while_loop_statement','any_statement',1,'p_any_statement','main.py',238),
  ('any_statement -> do_while_loop_statement','any_statement',1,'p_any_statement','main.py',239),
  ('any_statement -> break_statement','any_statement',1,'p_any_statement','main.py',240),
  ('any_statement -> for_loop_statement','any_statement',1,'p_any_statement','main.py',241),
  ('any_statement -> if_statement opt_else_if_statements opt_else_statement','any_statement',3,'p_any_statement','main.py',242),
  ('any_statement -> print_statement','any_statement',1,'p_any_statement','main.py',243),
  ('any_statement -> scan_statement','any_statement',1,'p_any_statement','main.py',244),
  ('declaration_statement -> opt_const type ID opt_array_mark','declaration_statement',4,'p_declaration_statement','main.py',252),
  ('declaration_statement -> opt_const type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON','declaration_statement',7,'p_declaration_statement','main.py',253),
  ('assign_statement -> assign_expression SEMICOLON','assign_statement',2,'p_assign_statement','main.py',292),
  ('function_statement -> function_expression SEMICOLON','function_statement',2,'p_function_statement','main.py',298),
  ('return_statement -> RETURN value_expression SEMICOLON','return_statement',3,'p_return_statement','main.py',303),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','main.py',308),
  ('function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block','function_definition_statement',6,'p_function_definition_statement','main.py',313),
  ('while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block','while_loop_statement',5,'p_while_loop_statement','main.py',318),
  ('do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON','do_while_loop_statement',7,'p_do_while_loop_statement','main.py',323),
  ('for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block','for_loop_statement',8,'p_for_loop_statement','main.py',331),
  ('decl_stat_or_sem -> declaration_statement','decl_stat_or_sem',1,'p_decl_stat_or_sem','main.py',343),
  ('decl_stat_or_sem -> SEMICOLON','decl_stat_or_sem',1,'p_decl_stat_or_sem','main.py',344),
  ('if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block','if_statement',5,'p_if_statement','main.py',352),
  ('else_statement -> ELSE statements_block','else_statement',2,'p_else_statement','main.py',357),
  ('else_if_statement -> ELSE IF L_BRACKET logical_expression R_BRACKET statements_block','else_if_statement',6,'p_else_if_statement','main.py',362),
  ('else_if_statements -> else_if_statement','else_if_statements',1,'p_else_if_statements','main.py',368),
  ('else_if_statements -> else_if_statement else_if_statements','else_if_statements',2,'p_else_if_statements','main.py',369),
  ('opt_else_statement -> else_statement','opt_else_statement',1,'p_opt_else_statement','main.py',379),
  ('opt_else_statement -> empty','opt_else_statement',1,'p_opt_else_statement','main.py',380),
  ('opt_else_if_statements -> else_if_statements','opt_else_if_statements',1,'p_opt_else_if_statements','main.py',385),
  ('opt_else_if_statements -> empty','opt_else_if_statements',1,'p_opt_else_if_statements','main.py',386),
  ('print_statement -> PRINTF L_BRACKET value_expression R_BRACKET','print_statement',4,'p_print_statement','main.py',392),
  ('scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET','scan_statement',5,'p_scan_statement','main.py',397),
  ('declaration_value_expression -> value_expression','declaration_value_expression',1,'p_declaration_value_expression','main.py',404),
  ('declaration_value_expression -> L_BRACE listed_values R_BRACE','declaration_value_expression',3,'p_declaration_value_expression','main.py',405),
  ('declaration_value_expression -> L_BRACE declaration_value_expression R_BRACE','declaration_value_expression',3,'p_declaration_value_expression','main.py',406),
  ('value_expression -> math_expression','value_expression',1,'p_value_expression','main.py',415),
  ('value_expression -> function_expression','value_expression',1,'p_value_expression','main.py',416),
  ('value_expression -> value','value_expression',1,'p_value_expression','main.py',417),
  ('value_expression -> trinary_mark_expression','value_expression',1,'p_value_expression','main.py',418),
  ('value_expression -> L_BRACKET value_expression R_BRACKET','value_expression',3,'p_value_expression','main.py',419),
  ('opt_value_expression -> value_expression','opt_value_expression',1,'p_opt_value_expression','main.py',429),
  ('opt_value_expression -> empty','opt_value_expression',1,'p_opt_value_expression','main.py',430),
  ('math_expression -> L_BRACKET math_expression R_BRACKET','math_expression',3,'p_math_expression','main.py',436),
  ('math_expression -> MINUS math_expression','math_expression',2,'p_math_expression','main.py',437),
  ('math_expression -> MINUS value','math_expression',2,'p_math_expression','main.py',438),
  ('math_expression -> value math_op value','math_expression',3,'p_math_expression','main.py',439),
  ('logical_expression -> logical_expression bool_op logical_expression','logical_expression',3,'p_logical_expression','main.py',455),
  ('logical_expression -> NEGATION logical_expression','logical_expression',2,'p_logical_expression','main.py',456),
  ('logical_expression -> value_expression comparison_op value_expression','logical_expression',3,'p_logical_expression','main.py',457),
  ('function_expression -> ID L_BRACKET opt_listed_values R_BRACKET','function_expression',4,'p_function_expression','main.py',470),
  ('trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression','trinary_mark_expression',5,'p_trinary_mark_expression','main.py',475),
  ('assign_expression -> ID assign_op value_expression','assign_expression',3,'p_assign_expression','main.py',481),
  ('assign_expression -> unary_op ID','assign_expression',2,'p_assign_expression','main.py',482),
  ('assign_expression -> ID unary_op','assign_expression',2,'p_assign_expression','main.py',483),
  ('opt_logical_expression -> logical_expression','opt_logical_expression',1,'p_opt_logical_expression','main.py',495),
  ('opt_logical_expression -> empty','opt_logical_expression',1,'p_opt_logical_expression','main.py',496),
  ('opt_assign_expression -> assign_expression','opt_assign_expression',1,'p_opt_assign_expression','main.py',502),
  ('opt_assign_expression -> empty','opt_assign_expression',1,'p_opt_assign_expression','main.py',503),
  ('type -> INT','type',1,'p_type','main.py',511),
  ('type -> FLOAT','type',1,'p_type','main.py',512),
  ('type -> DOUBLE','type',1,'p_type','main.py',513),
  ('type -> CHAR','type',1,'p_type','main.py',514),
  ('type -> BOOL','type',1,'p_type','main.py',515),
  ('type -> LONG','type',1,'p_type','main.py',516),
  ('type -> VOID','type',1,'p_type','main.py',517),
  ('value -> INTEGER','value',1,'p_value','main.py',522),
  ('value -> DECIMAL','value',1,'p_value','main.py',523),
  ('value -> CHARACTER','value',1,'p_value','main.py',524),
  ('value -> STRING','value',1,'p_value','main.py',525),
  ('value -> TRUE','value',1,'p_value','main.py',526),
  ('value -> FALSE','value',1,'p_value','main.py',527),
  ('value -> ID','value',1,'p_value','main.py',528),
  ('value -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET','value',4,'p_value','main.py',529),
  ('listed_values -> value_expression COMMA value_expression','listed_values',3,'p_listed_values','main.py',545),
  ('listed_values -> value_expression COMMA listed_values','listed_values',3,'p_listed_values','main.py',546),
  ('math_op -> PLUS','math_op',1,'p_math_op','main.py',556),
  ('math_op -> MINUS','math_op',1,'p_math_op','main.py',557),
  ('math_op -> MUL','math_op',1,'p_math_op','main.py',558),
  ('math_op -> DIV','math_op',1,'p_math_op','main.py',559),
  ('math_op -> MOD','math_op',1,'p_math_op','main.py',560),
  ('unary_op -> INCREMENT','unary_op',1,'p_unary_op','main.py',566),
  ('unary_op -> DECREMENT','unary_op',1,'p_unary_op','main.py',567),
  ('bool_op -> AND','bool_op',1,'p_bool_op','main.py',572),
  ('bool_op -> OR','bool_op',1,'p_bool_op','main.py',573),
  ('comparison_op -> EQUAL','comparison_op',1,'p_comparison_op','main.py',583),
  ('comparison_op -> NOT_EQUAL','comparison_op',1,'p_comparison_op','main.py',584),
  ('comparison_op -> GREATER','comparison_op',1,'p_comparison_op','main.py',585),
  ('comparison_op -> GREATER_EQUAL','comparison_op',1,'p_comparison_op','main.py',586),
  ('comparison_op -> LESSER','comparison_op',1,'p_comparison_op','main.py',587),
  ('comparison_op -> LESSER_EQUAL','comparison_op',1,'p_comparison_op','main.py',588),
  ('assign_op -> ASSIGN','assign_op',1,'p_assign_op','main.py',594),
  ('assign_op -> PLUS_ASSIGN','assign_op',1,'p_assign_op','main.py',595),
  ('assign_op -> MINUS_ASSIGN','assign_op',1,'p_assign_op','main.py',596),
  ('assign_op -> MUL_ASSIGN','assign_op',1,'p_assign_op','main.py',597),
  ('assign_op -> DIV_ASSIGN','assign_op',1,'p_assign_op','main.py',598),
  ('assign_op -> MOD_ASSIGN','assign_op',1,'p_assign_op','main.py',599),
  ('array_mark -> L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET','array_mark',3,'p_array_mark','main.py',605),
  ('opt_const -> CONST','opt_const',1,'p_opt_const','main.py',611),
  ('opt_const -> empty','opt_const',1,'p_opt_const','main.py',612),
  ('opt_array_mark -> array_mark','opt_array_mark',1,'p_opt_array_mark','main.py',617),
  ('opt_array_mark -> empty','opt_array_mark',1,'p_opt_array_mark','main.py',618),
  ('opt_listed_values -> listed_values','opt_listed_values',1,'p_opt_listed_values','main.py',624),
  ('opt_listed_values -> empty','opt_listed_values',1,'p_opt_listed_values','main.py',625),
  ('args -> type ID','args',2,'p_args','main.py',631),
  ('args -> type ID COMMA args','args',4,'p_args','main.py',632),
  ('opt_args -> args','opt_args',1,'p_opt_args','main.py',642),
  ('opt_args -> empty','opt_args',1,'p_opt_args','main.py',643),
  ('empty -> <empty>','empty',0,'p_empty','main.py',649),
]
