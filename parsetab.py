
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ASSIGN BOOL BREAK CHAR CHARACTER COLON COMMA COMMENT CONST DECIMAL DECREMENT DIV DIV_ASSIGN DO DOUBLE ELSE EQUAL FALSE FLOAT FOR GREATER GREATER_EQUAL ID IF INCREMENT INT INTEGER LESSER LESSER_EQUAL LONG L_BRACE L_BRACKET L_SQUARE_BRACKET MINUS MINUS_ASSIGN MOD MOD_ASSIGN MUL MUL_ASSIGN NEGATION NOT_EQUAL OR PLUS PLUS_ASSIGN PREPROCESSOR_LINE PRINTF QUESTION_MARK RETURN R_BRACE R_BRACKET R_SQUARE_BRACKET SCANF SEMICOLON STRING TRUE UNSIGNED VOID WHILEs_prim : programprogram : program_component\n               | program_component programprogram_component : declaration_statement\n                         | function_definition_statement\n                         | COMMENT\n                         | PREPROCESSOR_LINEstatement : any_statement\n                 | COMMENT\n                 | SEMICOLONstatements : statement\n                  | statement statementsopt_statements : statements\n                      | emptystatements_block : L_BRACE opt_statements R_BRACEany_statement : declaration_statement\n                     | assign_statement\n                     | function_statement\n                     | return_statement\n                     | while_loop_statement\n                     | do_while_loop_statement\n                     | break_statement\n                     | for_loop_statement\n                     | if_statement opt_else_if_statements opt_else_statement\n                     | print_statement\n                     | scan_statementdeclaration_statement : opt_const type ID opt_array_mark\n                             | opt_const type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLONassign_statement : assign_expression SEMICOLONfunction_statement  : function_expression SEMICOLONreturn_statement : RETURN value_expression SEMICOLONbreak_statement : BREAK SEMICOLONfunction_definition_statement : type ID L_BRACKET opt_args R_BRACKET statements_blockwhile_loop_statement : WHILE L_BRACKET logical_expression R_BRACKET statements_blockdo_while_loop_statement : DO statements_block WHILE L_BRACKET logical_expression  R_BRACKET SEMICOLONfor_loop_statement : FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_blockdecl_stat_or_sem : declaration_statement\n                        | SEMICOLONif_statement : IF L_BRACKET logical_expression R_BRACKET statements_blockelse_if_statement : ELSE IF L_BRACKET logical_expression R_BRACKET statements_blockelse_if_statements : else_if_statement\n                          | else_if_statement else_if_statementsopt_else_if_statements : else_if_statements\n                              | emptyelse_statement : ELSE statements_blockopt_else_statement : else_statement\n                          | emptyprint_statement : PRINTF L_BRACKET value_expression R_BRACKETscan_statement : SCANF L_BRACKET AMPERSAND ID  R_BRACKETdeclaration_value_expression : value_expression\n                                    | L_BRACE listed_values R_BRACE\n                                    | L_BRACE declaration_value_expression R_BRACEvalue_expression : math_expression\n                        | logical_expression\n                        | function_expression\n                        | value\n                        | trinary_mark_expression\n                        | L_BRACKET value_expression R_BRACKETopt_value_expression : value_expression\n                            | emptymath_expression : math_expression math_op math_expression\n                       | MINUS math_expression\n                       | INTEGER\n                       | DECIMAL\n                       | CHARACTER\n                       | ID\n                       | L_BRACKET math_expression R_BRACKETlogical_expression : logical_expression bool_op logical_expression\n                          | NEGATION logical_expression\n                          | value_expression comparison_op value_expression\n                          | value_expressionfunction_expression : ID L_BRACKET opt_listed_values R_BRACKETtrinary_mark_expression : logical_expression QUESTION_MARK value_expression COLON value_expressionassign_expression : ID assign_op value_expression\n                         | unary_op ID\n                         | ID unary_opopt_logical_expression : logical_expression\n                              | emptyopt_assign_expression : assign_expression\n                             | emptytype : INT\n            | FLOAT\n            | DOUBLE\n            | CHAR\n            | BOOL\n            | LONG\n            | VOIDvalue : INTEGER\n             | DECIMAL\n             | CHARACTER\n             | STRING\n             | TRUE\n             | FALSE\n             | ID\n             | ID L_SQUARE_BRACKET value_expression  R_SQUARE_BRACKETlisted_values : value_expression\n                     | listed_values COMMA listed_valuesmath_op : PLUS\n               | MINUS\n               | MUL\n               | DIV\n               | MODunary_op : INCREMENT\n                | DECREMENTbool_op : AND\n               | ORcomparison_op : EQUAL\n                     | NOT_EQUAL\n                     | GREATER\n                     | GREATER_EQUAL\n                     | LESSER\n                     | LESSER_EQUALassign_op : ASSIGN\n                 | PLUS_ASSIGN\n                 | MINUS_ASSIGN\n                 | MUL_ASSIGN\n                 | DIV_ASSIGN\n                 | MOD_ASSIGNarray_mark : L_SQUARE_BRACKET opt_value_expression  R_SQUARE_BRACKET opt_const : CONST\n                 | emptyopt_array_mark : array_mark\n                      | emptyopt_listed_values :  listed_values\n                         | emptyargs : type ID\n            | type ID COMMA argsopt_args : args type ID\n                | emptyempty : '
    
_lr_action_items = {'COMMENT':([0,3,4,5,6,7,22,24,25,26,57,88,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[6,6,-4,-5,-6,-7,-130,-27,-122,-123,-119,-33,113,-28,113,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'PREPROCESSOR_LINE':([0,3,4,5,6,7,22,24,25,26,57,88,91,146,],[7,7,-4,-5,-6,-7,-130,-27,-122,-123,-119,-33,-28,-15,]),'CONST':([0,3,4,5,6,7,22,24,25,26,57,88,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[10,10,-4,-5,-6,-7,-130,-27,-122,-123,-119,-33,10,-28,10,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,10,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'INT':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[12,12,-4,-5,-6,-7,12,-120,-121,-130,12,-27,-122,-123,12,-126,-119,12,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'FLOAT':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[13,13,-4,-5,-6,-7,13,-120,-121,-130,13,-27,-122,-123,13,-126,-119,13,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'DOUBLE':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[14,14,-4,-5,-6,-7,14,-120,-121,-130,14,-27,-122,-123,14,-126,-119,14,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'CHAR':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[15,15,-4,-5,-6,-7,15,-120,-121,-130,15,-27,-122,-123,15,-126,-119,15,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'BOOL':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[16,16,-4,-5,-6,-7,16,-120,-121,-130,16,-27,-122,-123,16,-126,-119,16,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'LONG':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[17,17,-4,-5,-6,-7,17,-120,-121,-130,17,-27,-122,-123,17,-126,-119,17,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'VOID':([0,3,4,5,6,7,8,10,11,22,23,24,25,26,30,51,57,87,88,89,91,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,167,174,175,176,178,181,190,198,201,204,205,212,213,215,],[18,18,-4,-5,-6,-7,18,-120,-121,-130,18,-27,-122,-123,18,-126,-119,18,-33,-130,-28,-127,-121,-130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-130,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'$end':([1,2,3,4,5,6,7,19,22,24,25,26,57,88,91,146,],[0,-1,-2,-4,-5,-6,-7,-3,-130,-27,-122,-123,-119,-33,-28,-15,]),'ID':([9,12,13,14,15,16,17,18,20,22,24,25,26,27,28,32,41,42,47,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,137,138,139,141,143,146,148,149,150,151,153,155,156,157,158,159,160,161,162,164,166,168,169,174,175,176,178,181,184,185,186,189,190,191,193,198,201,203,204,205,212,213,215,],[21,-81,-82,-83,-84,-85,-86,-87,22,-130,-27,-122,-123,46,51,46,46,81,46,90,46,-119,46,-107,-108,-109,-110,-111,-112,81,-98,-99,-100,-101,-102,46,46,-105,-106,81,46,46,126,-28,126,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,46,171,-103,-104,46,46,-15,-130,-43,-44,-41,46,-113,-114,-115,-116,-117,-118,-29,-30,46,-32,46,46,-24,-46,-47,-42,-31,46,-38,-37,199,-45,46,46,-48,-34,211,-39,-49,-40,-35,-36,]),'L_BRACKET':([21,22,24,25,26,27,32,41,42,46,47,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,91,126,129,130,133,134,135,136,141,143,153,155,156,157,158,159,160,164,168,169,179,183,184,185,186,191,193,],[23,-130,-27,-122,-123,41,41,41,82,83,41,41,-119,41,-107,-108,-109,-110,-111,-112,82,-98,-99,-100,-101,-102,41,41,-105,-106,82,41,41,-28,83,41,164,167,168,169,170,41,41,41,-113,-114,-115,-116,-117,-118,41,41,41,191,193,41,-38,-37,41,41,]),'L_SQUARE_BRACKET':([22,46,],[27,84,]),'ASSIGN':([22,24,25,26,57,126,211,],[-130,32,-122,-123,-119,155,155,]),'SEMICOLON':([22,24,25,26,36,37,38,39,40,43,44,45,46,48,49,50,54,55,57,77,78,79,80,81,85,86,89,91,95,96,97,99,100,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,128,132,138,139,140,142,144,145,146,148,149,150,151,154,161,162,163,166,167,171,173,174,175,176,178,180,181,184,185,186,190,194,195,196,198,201,204,205,207,212,213,215,],[-130,-27,-122,-123,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,91,-50,-119,-62,-63,-64,-65,-66,-54,-71,114,-28,-70,-61,-54,-58,-67,114,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,161,162,166,-103,-104,-51,-52,-72,-95,-15,-130,-43,-44,-41,-76,-29,-30,181,-32,185,-75,-71,-24,-46,-47,-42,-71,-31,-130,-38,-37,-45,203,-54,-78,-48,-34,-39,-49,213,-40,-35,-36,]),'RETURN':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,129,-28,129,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'WHILE':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,165,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,130,-28,130,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,183,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'DO':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,131,-28,131,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'BREAK':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,132,-28,132,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'FOR':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,133,-28,133,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'IF':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,152,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,134,-28,134,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,179,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'PRINTF':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,135,-28,135,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'SCANF':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-119,136,-28,136,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'INCREMENT':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,203,204,205,211,212,213,215,],[-130,-27,-122,-123,-119,138,-28,138,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,138,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,138,-39,-49,138,-40,-35,-36,]),'DECREMENT':([22,24,25,26,57,89,91,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,146,148,149,150,151,161,162,166,174,175,176,178,181,190,198,201,203,204,205,211,212,213,215,],[-130,-27,-122,-123,-119,139,-28,139,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,139,-15,-130,-43,-44,-41,-29,-30,-32,-24,-46,-47,-42,-31,-45,-48,-34,139,-39,-49,139,-40,-35,-36,]),'R_BRACE':([22,24,25,26,36,37,38,39,40,43,44,45,46,48,49,50,57,77,78,79,80,81,85,86,89,91,92,93,94,95,96,97,99,100,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,140,142,144,145,146,147,148,149,150,151,161,162,166,172,173,174,175,176,178,181,190,198,201,204,205,212,213,215,],[-130,-27,-122,-123,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,-119,-62,-63,-64,-65,-66,-54,-71,-130,-28,140,142,-50,-70,-61,-54,-58,-67,-71,146,-13,-14,-11,-8,-9,-10,-16,-17,-18,-19,-20,-21,-22,-23,-130,-25,-26,-51,-52,-72,-95,-15,-12,-130,-43,-44,-41,-29,-30,-32,-97,-71,-24,-46,-47,-42,-31,-45,-48,-34,-39,-49,-40,-35,-36,]),'NEGATION':([22,24,25,26,27,32,41,47,56,57,58,59,60,61,62,63,64,71,72,73,74,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,47,47,47,47,47,-119,47,-107,-108,-109,-110,-111,-112,47,47,-105,-106,47,47,-28,47,47,47,47,-113,-114,-115,-116,-117,-118,47,47,47,47,-38,-37,47,47,]),'MINUS':([22,24,25,26,27,32,36,41,42,43,44,45,46,47,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,91,96,100,101,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,42,42,67,42,42,-63,-64,-65,-66,42,42,-119,42,-107,-108,-109,-110,-111,-112,42,-98,-99,-100,-101,-102,42,42,-105,-106,67,67,-63,-64,-65,-66,42,42,42,-28,67,-67,67,42,42,42,42,-113,-114,-115,-116,-117,-118,42,42,42,42,-38,-37,42,42,]),'INTEGER':([22,24,25,26,27,32,41,42,47,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,43,43,43,78,43,43,-119,43,-107,-108,-109,-110,-111,-112,78,-98,-99,-100,-101,-102,43,43,-105,-106,78,43,43,-28,43,43,43,43,-113,-114,-115,-116,-117,-118,43,43,43,43,-38,-37,43,43,]),'DECIMAL':([22,24,25,26,27,32,41,42,47,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,44,44,44,79,44,44,-119,44,-107,-108,-109,-110,-111,-112,79,-98,-99,-100,-101,-102,44,44,-105,-106,79,44,44,-28,44,44,44,44,-113,-114,-115,-116,-117,-118,44,44,44,44,-38,-37,44,44,]),'CHARACTER':([22,24,25,26,27,32,41,42,47,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,82,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,45,45,45,80,45,45,-119,45,-107,-108,-109,-110,-111,-112,80,-98,-99,-100,-101,-102,45,45,-105,-106,80,45,45,-28,45,45,45,45,-113,-114,-115,-116,-117,-118,45,45,45,45,-38,-37,45,45,]),'STRING':([22,24,25,26,27,32,41,47,56,57,58,59,60,61,62,63,64,71,72,73,74,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,48,48,48,48,48,-119,48,-107,-108,-109,-110,-111,-112,48,48,-105,-106,48,48,-28,48,48,48,48,-113,-114,-115,-116,-117,-118,48,48,48,48,-38,-37,48,48,]),'TRUE':([22,24,25,26,27,32,41,47,56,57,58,59,60,61,62,63,64,71,72,73,74,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,49,49,49,49,49,-119,49,-107,-108,-109,-110,-111,-112,49,49,-105,-106,49,49,-28,49,49,49,49,-113,-114,-115,-116,-117,-118,49,49,49,49,-38,-37,49,49,]),'FALSE':([22,24,25,26,27,32,41,47,56,57,58,59,60,61,62,63,64,71,72,73,74,83,84,91,129,141,143,153,155,156,157,158,159,160,164,168,169,184,185,186,191,193,],[-130,-27,-122,-123,50,50,50,50,50,-119,50,-107,-108,-109,-110,-111,-112,50,50,-105,-106,50,50,-28,50,50,50,50,-113,-114,-115,-116,-117,-118,50,50,50,50,-38,-37,50,50,]),'R_BRACKET':([23,29,31,36,37,38,39,40,43,44,45,46,48,49,50,75,76,77,78,79,80,81,83,85,86,90,95,96,97,99,100,101,102,103,104,105,138,139,144,145,154,171,172,173,180,182,187,188,199,200,202,203,208,209,210,],[-130,52,-129,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,99,100,-62,-63,-64,-65,-66,-130,-54,-71,-128,-70,-61,-54,-58,-67,100,144,-124,-125,-71,-103,-104,-72,-95,-76,-75,-97,-71,-71,192,197,198,205,206,207,-130,214,-79,-80,]),'R_SQUARE_BRACKET':([27,33,34,35,36,37,38,39,40,43,44,45,46,48,49,50,77,78,79,80,81,85,86,95,96,97,99,100,106,144,145,173,],[-130,57,-59,-60,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,-62,-63,-64,-65,-66,-54,-71,-70,-61,-54,-58,-67,145,-72,-95,-71,]),'L_BRACE':([32,52,56,131,177,192,197,206,214,],[56,89,56,89,89,89,89,89,89,]),'EQUAL':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[59,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,59,59,-53,-62,-63,-64,-65,-66,-54,59,59,59,-61,-54,59,-58,-67,59,59,-72,-95,59,59,59,-54,-54,59,-54,-54,-54,]),'NOT_EQUAL':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[60,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,60,60,-53,-62,-63,-64,-65,-66,-54,60,60,60,-61,-54,60,-58,-67,60,60,-72,-95,60,60,60,-54,-54,60,-54,-54,-54,]),'GREATER':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[61,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,61,61,-53,-62,-63,-64,-65,-66,-54,61,61,61,-61,-54,61,-58,-67,61,61,-72,-95,61,61,61,-54,-54,61,-54,-54,-54,]),'GREATER_EQUAL':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[62,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,62,62,-53,-62,-63,-64,-65,-66,-54,62,62,62,-61,-54,62,-58,-67,62,62,-72,-95,62,62,62,-54,-54,62,-54,-54,-54,]),'LESSER':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[63,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,63,63,-53,-62,-63,-64,-65,-66,-54,63,63,63,-61,-54,63,-58,-67,63,63,-72,-95,63,63,63,-54,-54,63,-54,-54,-54,]),'LESSER_EQUAL':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[64,-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,64,64,-53,-62,-63,-64,-65,-66,-54,64,64,64,-61,-54,64,-58,-67,64,64,-72,-95,64,64,64,-54,-54,64,-54,-54,-54,]),'QUESTION_MARK':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[-71,-53,72,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,-71,-71,-53,-62,-63,-64,-65,-66,72,-71,-71,-70,-61,72,-71,-58,-67,-71,-71,-72,-95,-71,-71,-71,72,72,-71,72,72,72,]),'AND':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[-71,-53,73,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,-71,-71,-53,-62,-63,-64,-65,-66,73,-71,-71,-70,-61,73,-71,-58,-67,-71,-71,-72,-95,-71,-71,-71,73,73,-71,73,73,73,]),'OR':([34,36,37,38,39,40,43,44,45,46,48,49,50,55,75,76,77,78,79,80,81,85,86,94,95,96,97,98,99,100,105,106,144,145,163,173,180,182,187,188,195,200,202,],[-71,-53,74,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,-71,-71,-53,-62,-63,-64,-65,-66,74,-71,-71,-70,-61,74,-71,-58,-67,-71,-71,-72,-95,-71,-71,-71,74,74,-71,74,74,74,]),'COMMA':([36,37,38,39,40,43,44,45,46,48,49,50,51,77,78,79,80,81,85,86,92,94,95,96,97,99,100,103,105,144,145,172,173,],[-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,87,-62,-63,-64,-65,-66,-54,-71,141,-71,-70,-61,-54,-58,-67,141,-71,-72,-95,141,-71,]),'COLON':([36,37,38,39,40,43,44,45,46,48,49,50,77,78,79,80,81,85,86,95,96,97,98,99,100,144,145,173,],[-53,-54,-55,-56,-57,-63,-64,-65,-66,-91,-92,-93,-62,-63,-64,-65,-66,-54,-71,-70,-61,-54,143,-58,-67,-72,-95,-71,]),'PLUS':([36,43,44,45,46,76,77,78,79,80,81,96,100,101,],[66,-63,-64,-65,-66,66,66,-63,-64,-65,-66,66,-67,66,]),'MUL':([36,43,44,45,46,76,77,78,79,80,81,96,100,101,],[68,-63,-64,-65,-66,68,68,-63,-64,-65,-66,68,-67,68,]),'DIV':([36,43,44,45,46,76,77,78,79,80,81,96,100,101,],[69,-63,-64,-65,-66,69,69,-63,-64,-65,-66,69,-67,69,]),'MOD':([36,43,44,45,46,76,77,78,79,80,81,96,100,101,],[70,-63,-64,-65,-66,70,70,-63,-64,-65,-66,70,-67,70,]),'ELSE':([123,146,148,149,150,151,178,204,212,],[152,-15,177,-43,-44,152,-42,-39,-40,]),'PLUS_ASSIGN':([126,211,],[156,156,]),'MINUS_ASSIGN':([126,211,],[157,157,]),'MUL_ASSIGN':([126,211,],[158,158,]),'DIV_ASSIGN':([126,211,],[159,159,]),'MOD_ASSIGN':([126,211,],[160,160,]),'AMPERSAND':([170,],[189,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'s_prim':([0,],[1,]),'program':([0,3,],[2,19,]),'program_component':([0,3,],[3,3,]),'declaration_statement':([0,3,89,111,167,],[4,4,115,115,186,]),'function_definition_statement':([0,3,],[5,5,]),'opt_const':([0,3,89,111,167,],[8,8,8,8,8,]),'type':([0,3,8,23,30,87,],[9,9,20,28,53,28,]),'empty':([0,3,22,23,27,83,89,111,123,148,167,184,203,],[11,11,26,31,35,104,110,11,150,176,11,196,210,]),'opt_array_mark':([22,],[24,]),'array_mark':([22,],[25,]),'opt_args':([23,],[29,]),'args':([23,87,],[30,107,]),'opt_value_expression':([27,],[33,]),'value_expression':([27,32,41,47,56,58,71,72,83,84,129,141,143,153,164,168,169,184,191,193,],[34,55,75,86,94,95,86,98,105,106,163,105,173,180,86,86,188,86,86,86,]),'math_expression':([27,32,41,42,47,56,58,65,71,72,82,83,84,129,141,143,153,164,168,169,184,191,193,],[36,36,76,77,36,36,36,96,36,36,101,36,36,36,36,36,36,36,36,36,36,36,36,]),'logical_expression':([27,32,41,47,56,58,71,72,83,84,129,141,143,153,164,168,169,184,191,193,],[37,37,37,85,37,37,97,37,37,37,37,37,37,37,182,187,37,195,200,202,]),'function_expression':([27,32,41,47,56,58,71,72,83,84,89,111,129,141,143,153,164,168,169,184,191,193,],[38,38,38,38,38,38,38,38,38,38,128,128,38,38,38,38,38,38,38,38,38,38,]),'value':([27,32,41,47,56,58,71,72,83,84,129,141,143,153,164,168,169,184,191,193,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'trinary_mark_expression':([27,32,41,47,56,58,71,72,83,84,129,141,143,153,164,168,169,184,191,193,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'declaration_value_expression':([32,56,],[54,93,]),'comparison_op':([34,55,75,86,94,95,98,105,106,163,173,180,188,],[58,58,58,58,58,58,58,58,58,58,58,58,58,]),'math_op':([36,76,77,96,101,],[65,65,65,65,65,]),'bool_op':([37,85,97,182,187,195,200,202,],[71,71,71,71,71,71,71,71,]),'statements_block':([52,131,177,192,197,206,214,],[88,165,190,201,204,212,215,]),'listed_values':([56,83,141,],[92,103,172,]),'opt_listed_values':([83,],[102,]),'opt_statements':([89,],[108,]),'statements':([89,111,],[109,147,]),'statement':([89,111,],[111,111,]),'any_statement':([89,111,],[112,112,]),'assign_statement':([89,111,],[116,116,]),'function_statement':([89,111,],[117,117,]),'return_statement':([89,111,],[118,118,]),'while_loop_statement':([89,111,],[119,119,]),'do_while_loop_statement':([89,111,],[120,120,]),'break_statement':([89,111,],[121,121,]),'for_loop_statement':([89,111,],[122,122,]),'if_statement':([89,111,],[123,123,]),'print_statement':([89,111,],[124,124,]),'scan_statement':([89,111,],[125,125,]),'assign_expression':([89,111,203,],[127,127,209,]),'unary_op':([89,111,126,203,211,],[137,137,154,137,154,]),'opt_else_if_statements':([123,],[148,]),'else_if_statements':([123,151,],[149,178,]),'else_if_statement':([123,151,],[151,151,]),'assign_op':([126,211,],[153,153,]),'opt_else_statement':([148,],[174,]),'else_statement':([148,],[175,]),'decl_stat_or_sem':([167,],[184,]),'opt_logical_expression':([184,],[194,]),'opt_assign_expression':([203,],[208,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> s_prim","S'",1,None,None,None),
  ('s_prim -> program','s_prim',1,'p_s_prim','main.py',168),
  ('program -> program_component','program',1,'p_program','main.py',174),
  ('program -> program_component program','program',2,'p_program','main.py',175),
  ('program_component -> declaration_statement','program_component',1,'p_program_component','main.py',183),
  ('program_component -> function_definition_statement','program_component',1,'p_program_component','main.py',184),
  ('program_component -> COMMENT','program_component',1,'p_program_component','main.py',185),
  ('program_component -> PREPROCESSOR_LINE','program_component',1,'p_program_component','main.py',186),
  ('statement -> any_statement','statement',1,'p_statement','main.py',192),
  ('statement -> COMMENT','statement',1,'p_statement','main.py',193),
  ('statement -> SEMICOLON','statement',1,'p_statement','main.py',194),
  ('statements -> statement','statements',1,'p_statements','main.py',202),
  ('statements -> statement statements','statements',2,'p_statements','main.py',203),
  ('opt_statements -> statements','opt_statements',1,'p_opt_statements','main.py',211),
  ('opt_statements -> empty','opt_statements',1,'p_opt_statements','main.py',212),
  ('statements_block -> L_BRACE opt_statements R_BRACE','statements_block',3,'p_statements_block','main.py',217),
  ('any_statement -> declaration_statement','any_statement',1,'p_any_statement','main.py',222),
  ('any_statement -> assign_statement','any_statement',1,'p_any_statement','main.py',223),
  ('any_statement -> function_statement','any_statement',1,'p_any_statement','main.py',224),
  ('any_statement -> return_statement','any_statement',1,'p_any_statement','main.py',225),
  ('any_statement -> while_loop_statement','any_statement',1,'p_any_statement','main.py',226),
  ('any_statement -> do_while_loop_statement','any_statement',1,'p_any_statement','main.py',227),
  ('any_statement -> break_statement','any_statement',1,'p_any_statement','main.py',228),
  ('any_statement -> for_loop_statement','any_statement',1,'p_any_statement','main.py',229),
  ('any_statement -> if_statement opt_else_if_statements opt_else_statement','any_statement',3,'p_any_statement','main.py',230),
  ('any_statement -> print_statement','any_statement',1,'p_any_statement','main.py',231),
  ('any_statement -> scan_statement','any_statement',1,'p_any_statement','main.py',232),
  ('declaration_statement -> opt_const type ID opt_array_mark','declaration_statement',4,'p_declaration_statement','main.py',240),
  ('declaration_statement -> opt_const type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON','declaration_statement',7,'p_declaration_statement','main.py',241),
  ('assign_statement -> assign_expression SEMICOLON','assign_statement',2,'p_assign_statement','main.py',280),
  ('function_statement -> function_expression SEMICOLON','function_statement',2,'p_function_statement','main.py',285),
  ('return_statement -> RETURN value_expression SEMICOLON','return_statement',3,'p_return_statement','main.py',290),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','main.py',295),
  ('function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block','function_definition_statement',6,'p_function_definition_statement','main.py',300),
  ('while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block','while_loop_statement',5,'p_while_loop_statement','main.py',305),
  ('do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON','do_while_loop_statement',7,'p_do_while_loop_statement','main.py',310),
  ('for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block','for_loop_statement',8,'p_for_loop_statement','main.py',318),
  ('decl_stat_or_sem -> declaration_statement','decl_stat_or_sem',1,'p_decl_stat_or_sem','main.py',330),
  ('decl_stat_or_sem -> SEMICOLON','decl_stat_or_sem',1,'p_decl_stat_or_sem','main.py',331),
  ('if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block','if_statement',5,'p_if_statement','main.py',339),
  ('else_if_statement -> ELSE IF L_BRACKET logical_expression R_BRACKET statements_block','else_if_statement',6,'p_else_if_statement','main.py',345),
  ('else_if_statements -> else_if_statement','else_if_statements',1,'p_else_if_statements','main.py',351),
  ('else_if_statements -> else_if_statement else_if_statements','else_if_statements',2,'p_else_if_statements','main.py',352),
  ('opt_else_if_statements -> else_if_statements','opt_else_if_statements',1,'p_opt_else_if_statements','main.py',362),
  ('opt_else_if_statements -> empty','opt_else_if_statements',1,'p_opt_else_if_statements','main.py',363),
  ('else_statement -> ELSE statements_block','else_statement',2,'p_else_statement','main.py',369),
  ('opt_else_statement -> else_statement','opt_else_statement',1,'p_opt_else_statement','main.py',375),
  ('opt_else_statement -> empty','opt_else_statement',1,'p_opt_else_statement','main.py',376),
  ('print_statement -> PRINTF L_BRACKET value_expression R_BRACKET','print_statement',4,'p_print_statement','main.py',382),
  ('scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET','scan_statement',5,'p_scan_statement','main.py',387),
  ('declaration_value_expression -> value_expression','declaration_value_expression',1,'p_declaration_value_expression','main.py',394),
  ('declaration_value_expression -> L_BRACE listed_values R_BRACE','declaration_value_expression',3,'p_declaration_value_expression','main.py',395),
  ('declaration_value_expression -> L_BRACE declaration_value_expression R_BRACE','declaration_value_expression',3,'p_declaration_value_expression','main.py',396),
  ('value_expression -> math_expression','value_expression',1,'p_value_expression','main.py',405),
  ('value_expression -> logical_expression','value_expression',1,'p_value_expression','main.py',406),
  ('value_expression -> function_expression','value_expression',1,'p_value_expression','main.py',407),
  ('value_expression -> value','value_expression',1,'p_value_expression','main.py',408),
  ('value_expression -> trinary_mark_expression','value_expression',1,'p_value_expression','main.py',409),
  ('value_expression -> L_BRACKET value_expression R_BRACKET','value_expression',3,'p_value_expression','main.py',410),
  ('opt_value_expression -> value_expression','opt_value_expression',1,'p_opt_value_expression','main.py',420),
  ('opt_value_expression -> empty','opt_value_expression',1,'p_opt_value_expression','main.py',421),
  ('math_expression -> math_expression math_op math_expression','math_expression',3,'p_math_expression','main.py',427),
  ('math_expression -> MINUS math_expression','math_expression',2,'p_math_expression','main.py',428),
  ('math_expression -> INTEGER','math_expression',1,'p_math_expression','main.py',429),
  ('math_expression -> DECIMAL','math_expression',1,'p_math_expression','main.py',430),
  ('math_expression -> CHARACTER','math_expression',1,'p_math_expression','main.py',431),
  ('math_expression -> ID','math_expression',1,'p_math_expression','main.py',432),
  ('math_expression -> L_BRACKET math_expression R_BRACKET','math_expression',3,'p_math_expression','main.py',433),
  ('logical_expression -> logical_expression bool_op logical_expression','logical_expression',3,'p_logical_expression','main.py',449),
  ('logical_expression -> NEGATION logical_expression','logical_expression',2,'p_logical_expression','main.py',450),
  ('logical_expression -> value_expression comparison_op value_expression','logical_expression',3,'p_logical_expression','main.py',451),
  ('logical_expression -> value_expression','logical_expression',1,'p_logical_expression','main.py',452),
  ('function_expression -> ID L_BRACKET opt_listed_values R_BRACKET','function_expression',4,'p_function_expression','main.py',465),
  ('trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression','trinary_mark_expression',5,'p_trinary_mark_expression','main.py',470),
  ('assign_expression -> ID assign_op value_expression','assign_expression',3,'p_assign_expression','main.py',476),
  ('assign_expression -> unary_op ID','assign_expression',2,'p_assign_expression','main.py',477),
  ('assign_expression -> ID unary_op','assign_expression',2,'p_assign_expression','main.py',478),
  ('opt_logical_expression -> logical_expression','opt_logical_expression',1,'p_opt_logical_expression','main.py',489),
  ('opt_logical_expression -> empty','opt_logical_expression',1,'p_opt_logical_expression','main.py',490),
  ('opt_assign_expression -> assign_expression','opt_assign_expression',1,'p_opt_assign_expression','main.py',496),
  ('opt_assign_expression -> empty','opt_assign_expression',1,'p_opt_assign_expression','main.py',497),
  ('type -> INT','type',1,'p_type','main.py',505),
  ('type -> FLOAT','type',1,'p_type','main.py',506),
  ('type -> DOUBLE','type',1,'p_type','main.py',507),
  ('type -> CHAR','type',1,'p_type','main.py',508),
  ('type -> BOOL','type',1,'p_type','main.py',509),
  ('type -> LONG','type',1,'p_type','main.py',510),
  ('type -> VOID','type',1,'p_type','main.py',511),
  ('value -> INTEGER','value',1,'p_value','main.py',516),
  ('value -> DECIMAL','value',1,'p_value','main.py',517),
  ('value -> CHARACTER','value',1,'p_value','main.py',518),
  ('value -> STRING','value',1,'p_value','main.py',519),
  ('value -> TRUE','value',1,'p_value','main.py',520),
  ('value -> FALSE','value',1,'p_value','main.py',521),
  ('value -> ID','value',1,'p_value','main.py',522),
  ('value -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET','value',4,'p_value','main.py',523),
  ('listed_values -> value_expression','listed_values',1,'p_listed_values','main.py',539),
  ('listed_values -> listed_values COMMA listed_values','listed_values',3,'p_listed_values','main.py',540),
  ('math_op -> PLUS','math_op',1,'p_math_op','main.py',550),
  ('math_op -> MINUS','math_op',1,'p_math_op','main.py',551),
  ('math_op -> MUL','math_op',1,'p_math_op','main.py',552),
  ('math_op -> DIV','math_op',1,'p_math_op','main.py',553),
  ('math_op -> MOD','math_op',1,'p_math_op','main.py',554),
  ('unary_op -> INCREMENT','unary_op',1,'p_unary_op','main.py',560),
  ('unary_op -> DECREMENT','unary_op',1,'p_unary_op','main.py',561),
  ('bool_op -> AND','bool_op',1,'p_bool_op','main.py',566),
  ('bool_op -> OR','bool_op',1,'p_bool_op','main.py',567),
  ('comparison_op -> EQUAL','comparison_op',1,'p_comparison_op','main.py',577),
  ('comparison_op -> NOT_EQUAL','comparison_op',1,'p_comparison_op','main.py',578),
  ('comparison_op -> GREATER','comparison_op',1,'p_comparison_op','main.py',579),
  ('comparison_op -> GREATER_EQUAL','comparison_op',1,'p_comparison_op','main.py',580),
  ('comparison_op -> LESSER','comparison_op',1,'p_comparison_op','main.py',581),
  ('comparison_op -> LESSER_EQUAL','comparison_op',1,'p_comparison_op','main.py',582),
  ('assign_op -> ASSIGN','assign_op',1,'p_assign_op','main.py',588),
  ('assign_op -> PLUS_ASSIGN','assign_op',1,'p_assign_op','main.py',589),
  ('assign_op -> MINUS_ASSIGN','assign_op',1,'p_assign_op','main.py',590),
  ('assign_op -> MUL_ASSIGN','assign_op',1,'p_assign_op','main.py',591),
  ('assign_op -> DIV_ASSIGN','assign_op',1,'p_assign_op','main.py',592),
  ('assign_op -> MOD_ASSIGN','assign_op',1,'p_assign_op','main.py',593),
  ('array_mark -> L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET','array_mark',3,'p_array_mark','main.py',599),
  ('opt_const -> CONST','opt_const',1,'p_opt_const','main.py',605),
  ('opt_const -> empty','opt_const',1,'p_opt_const','main.py',606),
  ('opt_array_mark -> array_mark','opt_array_mark',1,'p_opt_array_mark','main.py',611),
  ('opt_array_mark -> empty','opt_array_mark',1,'p_opt_array_mark','main.py',612),
  ('opt_listed_values -> listed_values','opt_listed_values',1,'p_opt_listed_values','main.py',618),
  ('opt_listed_values -> empty','opt_listed_values',1,'p_opt_listed_values','main.py',619),
  ('args -> type ID','args',2,'p_args','main.py',625),
  ('args -> type ID COMMA args','args',4,'p_args','main.py',626),
  ('opt_args -> args type ID','opt_args',3,'p_opt_args','main.py',636),
  ('opt_args -> empty','opt_args',1,'p_opt_args','main.py',637),
  ('empty -> <empty>','empty',0,'p_empty','main.py',643),
]
