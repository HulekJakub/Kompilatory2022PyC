Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> s_prim
Rule 1     s_prim -> program
Rule 2     program -> program_component
Rule 3     program -> program_component program
Rule 4     program_component -> program_item
Rule 5     program_component -> COMMENT
Rule 6     program_component -> PREPROCESSOR_LINE
Rule 7     program_item -> declaration_statement
Rule 8     program_item -> function_definition_statement
Rule 9     statement -> any_statement
Rule 10    statement -> COMMENT
Rule 11    statement -> SEMICOLON
Rule 12    statements -> statement
Rule 13    statements -> statement statements
Rule 14    opt_statements -> statements
Rule 15    opt_statements -> empty
Rule 16    statements_block -> L_BRACE opt_statements R_BRACE
Rule 17    any_statement -> declaration_statement
Rule 18    any_statement -> assign_statement
Rule 19    any_statement -> function_statement
Rule 20    any_statement -> return_statement
Rule 21    any_statement -> while_loop_statement
Rule 22    any_statement -> do_while_loop_statement
Rule 23    any_statement -> break_statement
Rule 24    any_statement -> for_loop_statement
Rule 25    any_statement -> if_statement_block
Rule 26    any_statement -> print_statement
Rule 27    any_statement -> scan_statement
Rule 28    declaration_statement -> type ID opt_array_mark SEMICOLON
Rule 29    declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
Rule 30    declaration_statement -> CONST type ID opt_array_mark SEMICOLON
Rule 31    declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
Rule 32    function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block
Rule 33    assign_statement -> assign_expression SEMICOLON
Rule 34    function_statement -> function_expression SEMICOLON
Rule 35    return_statement -> RETURN value_expression SEMICOLON
Rule 36    break_statement -> BREAK SEMICOLON
Rule 37    while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block
Rule 38    while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block
Rule 39    do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON
Rule 40    do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON
Rule 41    for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block
Rule 42    decl_stat_or_sem -> declaration_statement
Rule 43    decl_stat_or_sem -> SEMICOLON
Rule 44    if_statement_block -> if_statement
Rule 45    if_statement_block -> if_statement else_else_if_statements_block
Rule 46    if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block
Rule 47    if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block
Rule 48    else_else_if_statements_block -> else_statement
Rule 49    else_else_if_statements_block -> else_if_statement else_else_if_statements_block
Rule 50    else_else_if_statements_block -> else_if_statement
Rule 51    else_statement -> ELSE statements_block
Rule 52    else_if_statement -> ELSE if_statement
Rule 53    print_statement -> PRINTF L_BRACKET value_expression R_BRACKET
Rule 54    scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET
Rule 55    declaration_value_expression -> value_expression
Rule 56    declaration_value_expression -> L_BRACE listed_values R_BRACE
Rule 57    declaration_value_expression -> L_BRACE declaration_value_expression R_BRACE
Rule 58    value_expression -> math_expression
Rule 59    value_expression -> function_expression
Rule 60    value_expression -> value
Rule 61    value_expression -> trinary_mark_expression
Rule 62    value_expression -> L_BRACKET value_expression R_BRACKET
Rule 63    opt_value_expression -> value_expression
Rule 64    opt_value_expression -> empty
Rule 65    math_expression -> L_BRACKET math_expression R_BRACKET
Rule 66    math_expression -> MINUS math_expression
Rule 67    math_expression -> MINUS value
Rule 68    math_expression -> value math_op value
Rule 69    logical_expression -> logical_expression bool_op logical_expression
Rule 70    logical_expression -> NEGATION logical_expression
Rule 71    logical_expression -> value_expression comparison_op value_expression
Rule 72    logical_expression -> L_BRACKET logical_expression R_BRACKET
Rule 73    function_expression -> ID L_BRACKET opt_listed_values R_BRACKET
Rule 74    trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression
Rule 75    assign_expression -> ID assign_op value_expression
Rule 76    assign_expression -> list_element_extraction assign_op value_expression
Rule 77    assign_expression -> unary_op ID
Rule 78    assign_expression -> ID unary_op
Rule 79    opt_logical_expression -> logical_expression
Rule 80    opt_logical_expression -> empty
Rule 81    opt_assign_expression -> assign_expression
Rule 82    opt_assign_expression -> empty
Rule 83    type -> INT
Rule 84    type -> FLOAT
Rule 85    type -> DOUBLE
Rule 86    type -> CHAR
Rule 87    type -> BOOL
Rule 88    type -> LONG
Rule 89    type -> VOID
Rule 90    value -> INTEGER
Rule 91    value -> DECIMAL
Rule 92    value -> CHARACTER
Rule 93    value -> STRING
Rule 94    value -> TRUE
Rule 95    value -> FALSE
Rule 96    value -> ID
Rule 97    value -> list_element_extraction
Rule 98    list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
Rule 99    listed_values -> value_expression COMMA value_expression
Rule 100   listed_values -> value_expression COMMA listed_values
Rule 101   math_op -> PLUS
Rule 102   math_op -> MINUS
Rule 103   math_op -> MUL
Rule 104   math_op -> DIV
Rule 105   math_op -> MOD
Rule 106   unary_op -> INCREMENT
Rule 107   unary_op -> DECREMENT
Rule 108   bool_op -> AND
Rule 109   bool_op -> OR
Rule 110   comparison_op -> EQUAL
Rule 111   comparison_op -> NOT_EQUAL
Rule 112   comparison_op -> GREATER
Rule 113   comparison_op -> GREATER_EQUAL
Rule 114   comparison_op -> LESSER
Rule 115   comparison_op -> LESSER_EQUAL
Rule 116   assign_op -> ASSIGN
Rule 117   assign_op -> PLUS_ASSIGN
Rule 118   assign_op -> MINUS_ASSIGN
Rule 119   assign_op -> MUL_ASSIGN
Rule 120   assign_op -> DIV_ASSIGN
Rule 121   assign_op -> MOD_ASSIGN
Rule 122   array_mark -> L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET
Rule 123   opt_array_mark -> array_mark
Rule 124   opt_array_mark -> empty
Rule 125   opt_listed_values -> listed_values
Rule 126   opt_listed_values -> empty
Rule 127   args -> type ID
Rule 128   args -> type ID COMMA args
Rule 129   opt_args -> args
Rule 130   opt_args -> empty
Rule 131   empty -> <empty>

Terminals, with rules where they appear

AMPERSAND            : 54
AND                  : 108
ASSIGN               : 29 31 116
BOOL                 : 87
BREAK                : 36
CHAR                 : 86
CHARACTER            : 92
COLON                : 74
COMMA                : 99 100 128
COMMENT              : 5 10
CONST                : 30 31
DECIMAL              : 91
DECREMENT            : 107
DIV                  : 104
DIV_ASSIGN           : 120
DO                   : 39 40
DOUBLE               : 85
ELSE                 : 51 52
EQUAL                : 110
FALSE                : 95
FLOAT                : 84
FOR                  : 41
GREATER              : 112
GREATER_EQUAL        : 113
ID                   : 28 29 30 31 32 54 73 75 77 78 96 98 127 128
IF                   : 46 47
INCREMENT            : 106
INT                  : 83
INTEGER              : 90
LESSER               : 114
LESSER_EQUAL         : 115
LONG                 : 88
L_BRACE              : 16 56 57
L_BRACKET            : 32 37 38 39 40 41 46 47 53 54 62 65 72 73
L_SQUARE_BRACKET     : 98 122
MINUS                : 66 67 102
MINUS_ASSIGN         : 118
MOD                  : 105
MOD_ASSIGN           : 121
MUL                  : 103
MUL_ASSIGN           : 119
NEGATION             : 70
NOT_EQUAL            : 111
OR                   : 109
PLUS                 : 101
PLUS_ASSIGN          : 117
PREPROCESSOR_LINE    : 6
PRINTF               : 53
QUESTION_MARK        : 74
RETURN               : 35
R_BRACE              : 16 56 57
R_BRACKET            : 32 37 38 39 40 41 46 47 53 54 62 65 72 73
R_SQUARE_BRACKET     : 98 122
SCANF                : 54
SEMICOLON            : 11 28 29 30 31 33 34 35 36 39 40 41 43
STRING               : 93
TRUE                 : 94
VOID                 : 89
WHILE                : 37 38 39 40
error                : 

Nonterminals, with rules where they appear

any_statement        : 9
args                 : 128 129
array_mark           : 123
assign_expression    : 33 81
assign_op            : 75 76
assign_statement     : 18
bool_op              : 69
break_statement      : 23
comparison_op        : 71
decl_stat_or_sem     : 41
declaration_statement : 7 17 42
declaration_value_expression : 29 31 57
do_while_loop_statement : 22
else_else_if_statements_block : 45 49
else_if_statement    : 49 50
else_statement       : 48
empty                : 15 64 80 82 124 126 130
for_loop_statement   : 24
function_definition_statement : 8
function_expression  : 34 59
function_statement   : 19
if_statement         : 44 45 52
if_statement_block   : 25
list_element_extraction : 76 97
listed_values        : 56 100 125
logical_expression   : 37 39 46 69 69 70 72 74 79
math_expression      : 58 65 66
math_op              : 68
opt_args             : 32
opt_array_mark       : 28 29 30 31
opt_assign_expression : 41
opt_listed_values    : 73
opt_logical_expression : 41
opt_statements       : 16
opt_value_expression : 122
print_statement      : 26
program              : 1 3
program_component    : 2 3
program_item         : 4
return_statement     : 20
s_prim               : 0
scan_statement       : 27
statement            : 12 13
statements           : 13 14
statements_block     : 32 37 38 39 40 41 46 47 51
trinary_mark_expression : 61
type                 : 28 29 30 31 32 127 128
unary_op             : 77 78
value                : 60 67 68 68
value_expression     : 35 38 40 47 53 55 62 63 71 71 74 74 75 76 98 99 99 100
while_loop_statement : 21

Parsing method: LALR

state 0

    (0) S' -> . s_prim
    (1) s_prim -> . program
    (2) program -> . program_component
    (3) program -> . program_component program
    (4) program_component -> . program_item
    (5) program_component -> . COMMENT
    (6) program_component -> . PREPROCESSOR_LINE
    (7) program_item -> . declaration_statement
    (8) program_item -> . function_definition_statement
    (28) declaration_statement -> . type ID opt_array_mark SEMICOLON
    (29) declaration_statement -> . type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (30) declaration_statement -> . CONST type ID opt_array_mark SEMICOLON
    (31) declaration_statement -> . CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (32) function_definition_statement -> . type ID L_BRACKET opt_args R_BRACKET statements_block
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID

    COMMENT         shift and go to state 5
    PREPROCESSOR_LINE shift and go to state 6
    CONST           shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17

    s_prim                         shift and go to state 1
    program                        shift and go to state 2
    program_component              shift and go to state 3
    program_item                   shift and go to state 4
    declaration_statement          shift and go to state 7
    function_definition_statement  shift and go to state 8
    type                           shift and go to state 9

state 1

    (0) S' -> s_prim .



state 2

    (1) s_prim -> program .

    $end            reduce using rule 1 (s_prim -> program .)


state 3

    (2) program -> program_component .
    (3) program -> program_component . program
    (2) program -> . program_component
    (3) program -> . program_component program
    (4) program_component -> . program_item
    (5) program_component -> . COMMENT
    (6) program_component -> . PREPROCESSOR_LINE
    (7) program_item -> . declaration_statement
    (8) program_item -> . function_definition_statement
    (28) declaration_statement -> . type ID opt_array_mark SEMICOLON
    (29) declaration_statement -> . type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (30) declaration_statement -> . CONST type ID opt_array_mark SEMICOLON
    (31) declaration_statement -> . CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (32) function_definition_statement -> . type ID L_BRACKET opt_args R_BRACKET statements_block
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID

    $end            reduce using rule 2 (program -> program_component .)
    COMMENT         shift and go to state 5
    PREPROCESSOR_LINE shift and go to state 6
    CONST           shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17

    program_component              shift and go to state 3
    program                        shift and go to state 18
    program_item                   shift and go to state 4
    declaration_statement          shift and go to state 7
    function_definition_statement  shift and go to state 8
    type                           shift and go to state 9

state 4

    (4) program_component -> program_item .

    COMMENT         reduce using rule 4 (program_component -> program_item .)
    PREPROCESSOR_LINE reduce using rule 4 (program_component -> program_item .)
    CONST           reduce using rule 4 (program_component -> program_item .)
    INT             reduce using rule 4 (program_component -> program_item .)
    FLOAT           reduce using rule 4 (program_component -> program_item .)
    DOUBLE          reduce using rule 4 (program_component -> program_item .)
    CHAR            reduce using rule 4 (program_component -> program_item .)
    BOOL            reduce using rule 4 (program_component -> program_item .)
    LONG            reduce using rule 4 (program_component -> program_item .)
    VOID            reduce using rule 4 (program_component -> program_item .)
    $end            reduce using rule 4 (program_component -> program_item .)


state 5

    (5) program_component -> COMMENT .

    COMMENT         reduce using rule 5 (program_component -> COMMENT .)
    PREPROCESSOR_LINE reduce using rule 5 (program_component -> COMMENT .)
    CONST           reduce using rule 5 (program_component -> COMMENT .)
    INT             reduce using rule 5 (program_component -> COMMENT .)
    FLOAT           reduce using rule 5 (program_component -> COMMENT .)
    DOUBLE          reduce using rule 5 (program_component -> COMMENT .)
    CHAR            reduce using rule 5 (program_component -> COMMENT .)
    BOOL            reduce using rule 5 (program_component -> COMMENT .)
    LONG            reduce using rule 5 (program_component -> COMMENT .)
    VOID            reduce using rule 5 (program_component -> COMMENT .)
    $end            reduce using rule 5 (program_component -> COMMENT .)


state 6

    (6) program_component -> PREPROCESSOR_LINE .

    COMMENT         reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    PREPROCESSOR_LINE reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    CONST           reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    INT             reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    FLOAT           reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    DOUBLE          reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    CHAR            reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    BOOL            reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    LONG            reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    VOID            reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)
    $end            reduce using rule 6 (program_component -> PREPROCESSOR_LINE .)


state 7

    (7) program_item -> declaration_statement .

    COMMENT         reduce using rule 7 (program_item -> declaration_statement .)
    PREPROCESSOR_LINE reduce using rule 7 (program_item -> declaration_statement .)
    CONST           reduce using rule 7 (program_item -> declaration_statement .)
    INT             reduce using rule 7 (program_item -> declaration_statement .)
    FLOAT           reduce using rule 7 (program_item -> declaration_statement .)
    DOUBLE          reduce using rule 7 (program_item -> declaration_statement .)
    CHAR            reduce using rule 7 (program_item -> declaration_statement .)
    BOOL            reduce using rule 7 (program_item -> declaration_statement .)
    LONG            reduce using rule 7 (program_item -> declaration_statement .)
    VOID            reduce using rule 7 (program_item -> declaration_statement .)
    $end            reduce using rule 7 (program_item -> declaration_statement .)


state 8

    (8) program_item -> function_definition_statement .

    COMMENT         reduce using rule 8 (program_item -> function_definition_statement .)
    PREPROCESSOR_LINE reduce using rule 8 (program_item -> function_definition_statement .)
    CONST           reduce using rule 8 (program_item -> function_definition_statement .)
    INT             reduce using rule 8 (program_item -> function_definition_statement .)
    FLOAT           reduce using rule 8 (program_item -> function_definition_statement .)
    DOUBLE          reduce using rule 8 (program_item -> function_definition_statement .)
    CHAR            reduce using rule 8 (program_item -> function_definition_statement .)
    BOOL            reduce using rule 8 (program_item -> function_definition_statement .)
    LONG            reduce using rule 8 (program_item -> function_definition_statement .)
    VOID            reduce using rule 8 (program_item -> function_definition_statement .)
    $end            reduce using rule 8 (program_item -> function_definition_statement .)


state 9

    (28) declaration_statement -> type . ID opt_array_mark SEMICOLON
    (29) declaration_statement -> type . ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (32) function_definition_statement -> type . ID L_BRACKET opt_args R_BRACKET statements_block

    ID              shift and go to state 19


state 10

    (30) declaration_statement -> CONST . type ID opt_array_mark SEMICOLON
    (31) declaration_statement -> CONST . type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 20

state 11

    (83) type -> INT .

    ID              reduce using rule 83 (type -> INT .)


state 12

    (84) type -> FLOAT .

    ID              reduce using rule 84 (type -> FLOAT .)


state 13

    (85) type -> DOUBLE .

    ID              reduce using rule 85 (type -> DOUBLE .)


state 14

    (86) type -> CHAR .

    ID              reduce using rule 86 (type -> CHAR .)


state 15

    (87) type -> BOOL .

    ID              reduce using rule 87 (type -> BOOL .)


state 16

    (88) type -> LONG .

    ID              reduce using rule 88 (type -> LONG .)


state 17

    (89) type -> VOID .

    ID              reduce using rule 89 (type -> VOID .)


state 18

    (3) program -> program_component program .

    $end            reduce using rule 3 (program -> program_component program .)


state 19

    (28) declaration_statement -> type ID . opt_array_mark SEMICOLON
    (29) declaration_statement -> type ID . opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (32) function_definition_statement -> type ID . L_BRACKET opt_args R_BRACKET statements_block
    (123) opt_array_mark -> . array_mark
    (124) opt_array_mark -> . empty
    (122) array_mark -> . L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET
    (131) empty -> .

    L_BRACKET       shift and go to state 22
    L_SQUARE_BRACKET shift and go to state 25
    SEMICOLON       reduce using rule 131 (empty -> .)
    ASSIGN          reduce using rule 131 (empty -> .)

    opt_array_mark                 shift and go to state 21
    array_mark                     shift and go to state 23
    empty                          shift and go to state 24

state 20

    (30) declaration_statement -> CONST type . ID opt_array_mark SEMICOLON
    (31) declaration_statement -> CONST type . ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON

    ID              shift and go to state 26


state 21

    (28) declaration_statement -> type ID opt_array_mark . SEMICOLON
    (29) declaration_statement -> type ID opt_array_mark . ASSIGN declaration_value_expression SEMICOLON

    SEMICOLON       shift and go to state 27
    ASSIGN          shift and go to state 28


state 22

    (32) function_definition_statement -> type ID L_BRACKET . opt_args R_BRACKET statements_block
    (129) opt_args -> . args
    (130) opt_args -> . empty
    (127) args -> . type ID
    (128) args -> . type ID COMMA args
    (131) empty -> .
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID

    R_BRACKET       reduce using rule 131 (empty -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 29
    opt_args                       shift and go to state 30
    args                           shift and go to state 31
    empty                          shift and go to state 32

state 23

    (123) opt_array_mark -> array_mark .

    SEMICOLON       reduce using rule 123 (opt_array_mark -> array_mark .)
    ASSIGN          reduce using rule 123 (opt_array_mark -> array_mark .)


state 24

    (124) opt_array_mark -> empty .

    SEMICOLON       reduce using rule 124 (opt_array_mark -> empty .)
    ASSIGN          reduce using rule 124 (opt_array_mark -> empty .)


state 25

    (122) array_mark -> L_SQUARE_BRACKET . opt_value_expression R_SQUARE_BRACKET
    (63) opt_value_expression -> . value_expression
    (64) opt_value_expression -> . empty
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (131) empty -> .
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    R_SQUARE_BRACKET reduce using rule 131 (empty -> .)
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    opt_value_expression           shift and go to state 33
    value_expression               shift and go to state 34
    empty                          shift and go to state 35
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 26

    (30) declaration_statement -> CONST type ID . opt_array_mark SEMICOLON
    (31) declaration_statement -> CONST type ID . opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (123) opt_array_mark -> . array_mark
    (124) opt_array_mark -> . empty
    (122) array_mark -> . L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET
    (131) empty -> .

    L_SQUARE_BRACKET shift and go to state 25
    SEMICOLON       reduce using rule 131 (empty -> .)
    ASSIGN          reduce using rule 131 (empty -> .)

    opt_array_mark                 shift and go to state 52
    array_mark                     shift and go to state 23
    empty                          shift and go to state 24

state 27

    (28) declaration_statement -> type ID opt_array_mark SEMICOLON .

    COMMENT         reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    PREPROCESSOR_LINE reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    CONST           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    INT             reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    FLOAT           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    DOUBLE          reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    CHAR            reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    BOOL            reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    LONG            reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    VOID            reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    $end            reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    SEMICOLON       reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    RETURN          reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    WHILE           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    DO              reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    BREAK           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    FOR             reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    PRINTF          reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    SCANF           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    ID              reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    IF              reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    INCREMENT       reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    DECREMENT       reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    R_BRACE         reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    NEGATION        reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    L_BRACKET       reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    MINUS           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    INTEGER         reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    DECIMAL         reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    CHARACTER       reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    STRING          reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    TRUE            reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)
    FALSE           reduce using rule 28 (declaration_statement -> type ID opt_array_mark SEMICOLON .)


state 28

    (29) declaration_statement -> type ID opt_array_mark ASSIGN . declaration_value_expression SEMICOLON
    (55) declaration_value_expression -> . value_expression
    (56) declaration_value_expression -> . L_BRACE listed_values R_BRACE
    (57) declaration_value_expression -> . L_BRACE declaration_value_expression R_BRACE
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACE         shift and go to state 55
    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    declaration_value_expression   shift and go to state 53
    value_expression               shift and go to state 54
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 29

    (127) args -> type . ID
    (128) args -> type . ID COMMA args

    ID              shift and go to state 56


state 30

    (32) function_definition_statement -> type ID L_BRACKET opt_args . R_BRACKET statements_block

    R_BRACKET       shift and go to state 57


state 31

    (129) opt_args -> args .

    R_BRACKET       reduce using rule 129 (opt_args -> args .)


state 32

    (130) opt_args -> empty .

    R_BRACKET       reduce using rule 130 (opt_args -> empty .)


state 33

    (122) array_mark -> L_SQUARE_BRACKET opt_value_expression . R_SQUARE_BRACKET

    R_SQUARE_BRACKET shift and go to state 58


state 34

    (63) opt_value_expression -> value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_SQUARE_BRACKET reduce using rule 63 (opt_value_expression -> value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 35

    (64) opt_value_expression -> empty .

    R_SQUARE_BRACKET reduce using rule 64 (opt_value_expression -> empty .)


state 36

    (58) value_expression -> math_expression .

    EQUAL           reduce using rule 58 (value_expression -> math_expression .)
    NOT_EQUAL       reduce using rule 58 (value_expression -> math_expression .)
    GREATER         reduce using rule 58 (value_expression -> math_expression .)
    GREATER_EQUAL   reduce using rule 58 (value_expression -> math_expression .)
    LESSER          reduce using rule 58 (value_expression -> math_expression .)
    LESSER_EQUAL    reduce using rule 58 (value_expression -> math_expression .)
    R_SQUARE_BRACKET reduce using rule 58 (value_expression -> math_expression .)
    SEMICOLON       reduce using rule 58 (value_expression -> math_expression .)
    COMMA           reduce using rule 58 (value_expression -> math_expression .)
    R_BRACE         reduce using rule 58 (value_expression -> math_expression .)
    QUESTION_MARK   reduce using rule 58 (value_expression -> math_expression .)
    AND             reduce using rule 58 (value_expression -> math_expression .)
    OR              reduce using rule 58 (value_expression -> math_expression .)
    R_BRACKET       reduce using rule 58 (value_expression -> math_expression .)
    COLON           reduce using rule 58 (value_expression -> math_expression .)


state 37

    (59) value_expression -> function_expression .

    EQUAL           reduce using rule 59 (value_expression -> function_expression .)
    NOT_EQUAL       reduce using rule 59 (value_expression -> function_expression .)
    GREATER         reduce using rule 59 (value_expression -> function_expression .)
    GREATER_EQUAL   reduce using rule 59 (value_expression -> function_expression .)
    LESSER          reduce using rule 59 (value_expression -> function_expression .)
    LESSER_EQUAL    reduce using rule 59 (value_expression -> function_expression .)
    R_SQUARE_BRACKET reduce using rule 59 (value_expression -> function_expression .)
    SEMICOLON       reduce using rule 59 (value_expression -> function_expression .)
    R_BRACKET       reduce using rule 59 (value_expression -> function_expression .)
    COMMA           reduce using rule 59 (value_expression -> function_expression .)
    R_BRACE         reduce using rule 59 (value_expression -> function_expression .)
    QUESTION_MARK   reduce using rule 59 (value_expression -> function_expression .)
    AND             reduce using rule 59 (value_expression -> function_expression .)
    OR              reduce using rule 59 (value_expression -> function_expression .)
    COLON           reduce using rule 59 (value_expression -> function_expression .)


state 38

    (60) value_expression -> value .
    (68) math_expression -> value . math_op value
    (101) math_op -> . PLUS
    (102) math_op -> . MINUS
    (103) math_op -> . MUL
    (104) math_op -> . DIV
    (105) math_op -> . MOD

    EQUAL           reduce using rule 60 (value_expression -> value .)
    NOT_EQUAL       reduce using rule 60 (value_expression -> value .)
    GREATER         reduce using rule 60 (value_expression -> value .)
    GREATER_EQUAL   reduce using rule 60 (value_expression -> value .)
    LESSER          reduce using rule 60 (value_expression -> value .)
    LESSER_EQUAL    reduce using rule 60 (value_expression -> value .)
    R_SQUARE_BRACKET reduce using rule 60 (value_expression -> value .)
    SEMICOLON       reduce using rule 60 (value_expression -> value .)
    R_BRACKET       reduce using rule 60 (value_expression -> value .)
    COMMA           reduce using rule 60 (value_expression -> value .)
    R_BRACE         reduce using rule 60 (value_expression -> value .)
    QUESTION_MARK   reduce using rule 60 (value_expression -> value .)
    AND             reduce using rule 60 (value_expression -> value .)
    OR              reduce using rule 60 (value_expression -> value .)
    COLON           reduce using rule 60 (value_expression -> value .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

    math_op                        shift and go to state 66

state 39

    (61) value_expression -> trinary_mark_expression .

    EQUAL           reduce using rule 61 (value_expression -> trinary_mark_expression .)
    NOT_EQUAL       reduce using rule 61 (value_expression -> trinary_mark_expression .)
    GREATER         reduce using rule 61 (value_expression -> trinary_mark_expression .)
    GREATER_EQUAL   reduce using rule 61 (value_expression -> trinary_mark_expression .)
    LESSER          reduce using rule 61 (value_expression -> trinary_mark_expression .)
    LESSER_EQUAL    reduce using rule 61 (value_expression -> trinary_mark_expression .)
    R_SQUARE_BRACKET reduce using rule 61 (value_expression -> trinary_mark_expression .)
    SEMICOLON       reduce using rule 61 (value_expression -> trinary_mark_expression .)
    R_BRACKET       reduce using rule 61 (value_expression -> trinary_mark_expression .)
    COMMA           reduce using rule 61 (value_expression -> trinary_mark_expression .)
    R_BRACE         reduce using rule 61 (value_expression -> trinary_mark_expression .)
    QUESTION_MARK   reduce using rule 61 (value_expression -> trinary_mark_expression .)
    AND             reduce using rule 61 (value_expression -> trinary_mark_expression .)
    OR              reduce using rule 61 (value_expression -> trinary_mark_expression .)
    COLON           reduce using rule 61 (value_expression -> trinary_mark_expression .)


state 40

    (62) value_expression -> L_BRACKET . value_expression R_BRACKET
    (65) math_expression -> L_BRACKET . math_expression R_BRACKET
    (72) logical_expression -> L_BRACKET . logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    NEGATION        shift and go to state 51
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    value_expression               shift and go to state 72
    math_expression                shift and go to state 73
    logical_expression             shift and go to state 74
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 41

    (66) math_expression -> MINUS . math_expression
    (67) math_expression -> MINUS . value
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    L_BRACKET       shift and go to state 77
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 78

    math_expression                shift and go to state 75
    value                          shift and go to state 76
    list_element_extraction        shift and go to state 49

state 42

    (73) function_expression -> ID . L_BRACKET opt_listed_values R_BRACKET
    (96) value -> ID .
    (98) list_element_extraction -> ID . L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    L_BRACKET       shift and go to state 79
    PLUS            reduce using rule 96 (value -> ID .)
    MINUS           reduce using rule 96 (value -> ID .)
    MUL             reduce using rule 96 (value -> ID .)
    DIV             reduce using rule 96 (value -> ID .)
    MOD             reduce using rule 96 (value -> ID .)
    EQUAL           reduce using rule 96 (value -> ID .)
    NOT_EQUAL       reduce using rule 96 (value -> ID .)
    GREATER         reduce using rule 96 (value -> ID .)
    GREATER_EQUAL   reduce using rule 96 (value -> ID .)
    LESSER          reduce using rule 96 (value -> ID .)
    LESSER_EQUAL    reduce using rule 96 (value -> ID .)
    R_SQUARE_BRACKET reduce using rule 96 (value -> ID .)
    SEMICOLON       reduce using rule 96 (value -> ID .)
    R_BRACKET       reduce using rule 96 (value -> ID .)
    COMMA           reduce using rule 96 (value -> ID .)
    R_BRACE         reduce using rule 96 (value -> ID .)
    QUESTION_MARK   reduce using rule 96 (value -> ID .)
    AND             reduce using rule 96 (value -> ID .)
    OR              reduce using rule 96 (value -> ID .)
    COLON           reduce using rule 96 (value -> ID .)
    L_SQUARE_BRACKET shift and go to state 80


state 43

    (90) value -> INTEGER .

    PLUS            reduce using rule 90 (value -> INTEGER .)
    MINUS           reduce using rule 90 (value -> INTEGER .)
    MUL             reduce using rule 90 (value -> INTEGER .)
    DIV             reduce using rule 90 (value -> INTEGER .)
    MOD             reduce using rule 90 (value -> INTEGER .)
    EQUAL           reduce using rule 90 (value -> INTEGER .)
    NOT_EQUAL       reduce using rule 90 (value -> INTEGER .)
    GREATER         reduce using rule 90 (value -> INTEGER .)
    GREATER_EQUAL   reduce using rule 90 (value -> INTEGER .)
    LESSER          reduce using rule 90 (value -> INTEGER .)
    LESSER_EQUAL    reduce using rule 90 (value -> INTEGER .)
    R_SQUARE_BRACKET reduce using rule 90 (value -> INTEGER .)
    SEMICOLON       reduce using rule 90 (value -> INTEGER .)
    R_BRACKET       reduce using rule 90 (value -> INTEGER .)
    COMMA           reduce using rule 90 (value -> INTEGER .)
    R_BRACE         reduce using rule 90 (value -> INTEGER .)
    QUESTION_MARK   reduce using rule 90 (value -> INTEGER .)
    AND             reduce using rule 90 (value -> INTEGER .)
    OR              reduce using rule 90 (value -> INTEGER .)
    COLON           reduce using rule 90 (value -> INTEGER .)


state 44

    (91) value -> DECIMAL .

    PLUS            reduce using rule 91 (value -> DECIMAL .)
    MINUS           reduce using rule 91 (value -> DECIMAL .)
    MUL             reduce using rule 91 (value -> DECIMAL .)
    DIV             reduce using rule 91 (value -> DECIMAL .)
    MOD             reduce using rule 91 (value -> DECIMAL .)
    EQUAL           reduce using rule 91 (value -> DECIMAL .)
    NOT_EQUAL       reduce using rule 91 (value -> DECIMAL .)
    GREATER         reduce using rule 91 (value -> DECIMAL .)
    GREATER_EQUAL   reduce using rule 91 (value -> DECIMAL .)
    LESSER          reduce using rule 91 (value -> DECIMAL .)
    LESSER_EQUAL    reduce using rule 91 (value -> DECIMAL .)
    R_SQUARE_BRACKET reduce using rule 91 (value -> DECIMAL .)
    SEMICOLON       reduce using rule 91 (value -> DECIMAL .)
    R_BRACKET       reduce using rule 91 (value -> DECIMAL .)
    COMMA           reduce using rule 91 (value -> DECIMAL .)
    R_BRACE         reduce using rule 91 (value -> DECIMAL .)
    QUESTION_MARK   reduce using rule 91 (value -> DECIMAL .)
    AND             reduce using rule 91 (value -> DECIMAL .)
    OR              reduce using rule 91 (value -> DECIMAL .)
    COLON           reduce using rule 91 (value -> DECIMAL .)


state 45

    (92) value -> CHARACTER .

    PLUS            reduce using rule 92 (value -> CHARACTER .)
    MINUS           reduce using rule 92 (value -> CHARACTER .)
    MUL             reduce using rule 92 (value -> CHARACTER .)
    DIV             reduce using rule 92 (value -> CHARACTER .)
    MOD             reduce using rule 92 (value -> CHARACTER .)
    EQUAL           reduce using rule 92 (value -> CHARACTER .)
    NOT_EQUAL       reduce using rule 92 (value -> CHARACTER .)
    GREATER         reduce using rule 92 (value -> CHARACTER .)
    GREATER_EQUAL   reduce using rule 92 (value -> CHARACTER .)
    LESSER          reduce using rule 92 (value -> CHARACTER .)
    LESSER_EQUAL    reduce using rule 92 (value -> CHARACTER .)
    R_SQUARE_BRACKET reduce using rule 92 (value -> CHARACTER .)
    SEMICOLON       reduce using rule 92 (value -> CHARACTER .)
    R_BRACKET       reduce using rule 92 (value -> CHARACTER .)
    COMMA           reduce using rule 92 (value -> CHARACTER .)
    R_BRACE         reduce using rule 92 (value -> CHARACTER .)
    QUESTION_MARK   reduce using rule 92 (value -> CHARACTER .)
    AND             reduce using rule 92 (value -> CHARACTER .)
    OR              reduce using rule 92 (value -> CHARACTER .)
    COLON           reduce using rule 92 (value -> CHARACTER .)


state 46

    (93) value -> STRING .

    PLUS            reduce using rule 93 (value -> STRING .)
    MINUS           reduce using rule 93 (value -> STRING .)
    MUL             reduce using rule 93 (value -> STRING .)
    DIV             reduce using rule 93 (value -> STRING .)
    MOD             reduce using rule 93 (value -> STRING .)
    EQUAL           reduce using rule 93 (value -> STRING .)
    NOT_EQUAL       reduce using rule 93 (value -> STRING .)
    GREATER         reduce using rule 93 (value -> STRING .)
    GREATER_EQUAL   reduce using rule 93 (value -> STRING .)
    LESSER          reduce using rule 93 (value -> STRING .)
    LESSER_EQUAL    reduce using rule 93 (value -> STRING .)
    R_SQUARE_BRACKET reduce using rule 93 (value -> STRING .)
    SEMICOLON       reduce using rule 93 (value -> STRING .)
    R_BRACKET       reduce using rule 93 (value -> STRING .)
    COMMA           reduce using rule 93 (value -> STRING .)
    R_BRACE         reduce using rule 93 (value -> STRING .)
    QUESTION_MARK   reduce using rule 93 (value -> STRING .)
    AND             reduce using rule 93 (value -> STRING .)
    OR              reduce using rule 93 (value -> STRING .)
    COLON           reduce using rule 93 (value -> STRING .)


state 47

    (94) value -> TRUE .

    PLUS            reduce using rule 94 (value -> TRUE .)
    MINUS           reduce using rule 94 (value -> TRUE .)
    MUL             reduce using rule 94 (value -> TRUE .)
    DIV             reduce using rule 94 (value -> TRUE .)
    MOD             reduce using rule 94 (value -> TRUE .)
    EQUAL           reduce using rule 94 (value -> TRUE .)
    NOT_EQUAL       reduce using rule 94 (value -> TRUE .)
    GREATER         reduce using rule 94 (value -> TRUE .)
    GREATER_EQUAL   reduce using rule 94 (value -> TRUE .)
    LESSER          reduce using rule 94 (value -> TRUE .)
    LESSER_EQUAL    reduce using rule 94 (value -> TRUE .)
    R_SQUARE_BRACKET reduce using rule 94 (value -> TRUE .)
    SEMICOLON       reduce using rule 94 (value -> TRUE .)
    R_BRACKET       reduce using rule 94 (value -> TRUE .)
    COMMA           reduce using rule 94 (value -> TRUE .)
    R_BRACE         reduce using rule 94 (value -> TRUE .)
    QUESTION_MARK   reduce using rule 94 (value -> TRUE .)
    AND             reduce using rule 94 (value -> TRUE .)
    OR              reduce using rule 94 (value -> TRUE .)
    COLON           reduce using rule 94 (value -> TRUE .)


state 48

    (95) value -> FALSE .

    PLUS            reduce using rule 95 (value -> FALSE .)
    MINUS           reduce using rule 95 (value -> FALSE .)
    MUL             reduce using rule 95 (value -> FALSE .)
    DIV             reduce using rule 95 (value -> FALSE .)
    MOD             reduce using rule 95 (value -> FALSE .)
    EQUAL           reduce using rule 95 (value -> FALSE .)
    NOT_EQUAL       reduce using rule 95 (value -> FALSE .)
    GREATER         reduce using rule 95 (value -> FALSE .)
    GREATER_EQUAL   reduce using rule 95 (value -> FALSE .)
    LESSER          reduce using rule 95 (value -> FALSE .)
    LESSER_EQUAL    reduce using rule 95 (value -> FALSE .)
    R_SQUARE_BRACKET reduce using rule 95 (value -> FALSE .)
    SEMICOLON       reduce using rule 95 (value -> FALSE .)
    R_BRACKET       reduce using rule 95 (value -> FALSE .)
    COMMA           reduce using rule 95 (value -> FALSE .)
    R_BRACE         reduce using rule 95 (value -> FALSE .)
    QUESTION_MARK   reduce using rule 95 (value -> FALSE .)
    AND             reduce using rule 95 (value -> FALSE .)
    OR              reduce using rule 95 (value -> FALSE .)
    COLON           reduce using rule 95 (value -> FALSE .)


state 49

    (97) value -> list_element_extraction .

    PLUS            reduce using rule 97 (value -> list_element_extraction .)
    MINUS           reduce using rule 97 (value -> list_element_extraction .)
    MUL             reduce using rule 97 (value -> list_element_extraction .)
    DIV             reduce using rule 97 (value -> list_element_extraction .)
    MOD             reduce using rule 97 (value -> list_element_extraction .)
    EQUAL           reduce using rule 97 (value -> list_element_extraction .)
    NOT_EQUAL       reduce using rule 97 (value -> list_element_extraction .)
    GREATER         reduce using rule 97 (value -> list_element_extraction .)
    GREATER_EQUAL   reduce using rule 97 (value -> list_element_extraction .)
    LESSER          reduce using rule 97 (value -> list_element_extraction .)
    LESSER_EQUAL    reduce using rule 97 (value -> list_element_extraction .)
    R_SQUARE_BRACKET reduce using rule 97 (value -> list_element_extraction .)
    SEMICOLON       reduce using rule 97 (value -> list_element_extraction .)
    R_BRACKET       reduce using rule 97 (value -> list_element_extraction .)
    COMMA           reduce using rule 97 (value -> list_element_extraction .)
    R_BRACE         reduce using rule 97 (value -> list_element_extraction .)
    QUESTION_MARK   reduce using rule 97 (value -> list_element_extraction .)
    AND             reduce using rule 97 (value -> list_element_extraction .)
    OR              reduce using rule 97 (value -> list_element_extraction .)
    COLON           reduce using rule 97 (value -> list_element_extraction .)


state 50

    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

    bool_op                        shift and go to state 82

state 51

    (70) logical_expression -> NEGATION . logical_expression
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    logical_expression             shift and go to state 85
    value_expression               shift and go to state 86
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 52

    (30) declaration_statement -> CONST type ID opt_array_mark . SEMICOLON
    (31) declaration_statement -> CONST type ID opt_array_mark . ASSIGN declaration_value_expression SEMICOLON

    SEMICOLON       shift and go to state 88
    ASSIGN          shift and go to state 89


state 53

    (29) declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression . SEMICOLON

    SEMICOLON       shift and go to state 90


state 54

    (55) declaration_value_expression -> value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    SEMICOLON       reduce using rule 55 (declaration_value_expression -> value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 55

    (56) declaration_value_expression -> L_BRACE . listed_values R_BRACE
    (57) declaration_value_expression -> L_BRACE . declaration_value_expression R_BRACE
    (99) listed_values -> . value_expression COMMA value_expression
    (100) listed_values -> . value_expression COMMA listed_values
    (55) declaration_value_expression -> . value_expression
    (56) declaration_value_expression -> . L_BRACE listed_values R_BRACE
    (57) declaration_value_expression -> . L_BRACE declaration_value_expression R_BRACE
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACE         shift and go to state 55
    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    listed_values                  shift and go to state 91
    declaration_value_expression   shift and go to state 92
    value_expression               shift and go to state 93
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 56

    (127) args -> type ID .
    (128) args -> type ID . COMMA args

    R_BRACKET       reduce using rule 127 (args -> type ID .)
    COMMA           shift and go to state 94


state 57

    (32) function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET . statements_block
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 95

state 58

    (122) array_mark -> L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET .

    SEMICOLON       reduce using rule 122 (array_mark -> L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 122 (array_mark -> L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET .)


state 59

    (71) logical_expression -> value_expression comparison_op . value_expression
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    value_expression               shift and go to state 97
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 60

    (110) comparison_op -> EQUAL .

    L_BRACKET       reduce using rule 110 (comparison_op -> EQUAL .)
    MINUS           reduce using rule 110 (comparison_op -> EQUAL .)
    ID              reduce using rule 110 (comparison_op -> EQUAL .)
    INTEGER         reduce using rule 110 (comparison_op -> EQUAL .)
    DECIMAL         reduce using rule 110 (comparison_op -> EQUAL .)
    CHARACTER       reduce using rule 110 (comparison_op -> EQUAL .)
    STRING          reduce using rule 110 (comparison_op -> EQUAL .)
    TRUE            reduce using rule 110 (comparison_op -> EQUAL .)
    FALSE           reduce using rule 110 (comparison_op -> EQUAL .)
    NEGATION        reduce using rule 110 (comparison_op -> EQUAL .)


state 61

    (111) comparison_op -> NOT_EQUAL .

    L_BRACKET       reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    MINUS           reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    ID              reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    INTEGER         reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    DECIMAL         reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    CHARACTER       reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    STRING          reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    TRUE            reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    FALSE           reduce using rule 111 (comparison_op -> NOT_EQUAL .)
    NEGATION        reduce using rule 111 (comparison_op -> NOT_EQUAL .)


state 62

    (112) comparison_op -> GREATER .

    L_BRACKET       reduce using rule 112 (comparison_op -> GREATER .)
    MINUS           reduce using rule 112 (comparison_op -> GREATER .)
    ID              reduce using rule 112 (comparison_op -> GREATER .)
    INTEGER         reduce using rule 112 (comparison_op -> GREATER .)
    DECIMAL         reduce using rule 112 (comparison_op -> GREATER .)
    CHARACTER       reduce using rule 112 (comparison_op -> GREATER .)
    STRING          reduce using rule 112 (comparison_op -> GREATER .)
    TRUE            reduce using rule 112 (comparison_op -> GREATER .)
    FALSE           reduce using rule 112 (comparison_op -> GREATER .)
    NEGATION        reduce using rule 112 (comparison_op -> GREATER .)


state 63

    (113) comparison_op -> GREATER_EQUAL .

    L_BRACKET       reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    MINUS           reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    ID              reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    INTEGER         reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    DECIMAL         reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    CHARACTER       reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    STRING          reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    TRUE            reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    FALSE           reduce using rule 113 (comparison_op -> GREATER_EQUAL .)
    NEGATION        reduce using rule 113 (comparison_op -> GREATER_EQUAL .)


state 64

    (114) comparison_op -> LESSER .

    L_BRACKET       reduce using rule 114 (comparison_op -> LESSER .)
    MINUS           reduce using rule 114 (comparison_op -> LESSER .)
    ID              reduce using rule 114 (comparison_op -> LESSER .)
    INTEGER         reduce using rule 114 (comparison_op -> LESSER .)
    DECIMAL         reduce using rule 114 (comparison_op -> LESSER .)
    CHARACTER       reduce using rule 114 (comparison_op -> LESSER .)
    STRING          reduce using rule 114 (comparison_op -> LESSER .)
    TRUE            reduce using rule 114 (comparison_op -> LESSER .)
    FALSE           reduce using rule 114 (comparison_op -> LESSER .)
    NEGATION        reduce using rule 114 (comparison_op -> LESSER .)


state 65

    (115) comparison_op -> LESSER_EQUAL .

    L_BRACKET       reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    MINUS           reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    ID              reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    INTEGER         reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    DECIMAL         reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    CHARACTER       reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    STRING          reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    TRUE            reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    FALSE           reduce using rule 115 (comparison_op -> LESSER_EQUAL .)
    NEGATION        reduce using rule 115 (comparison_op -> LESSER_EQUAL .)


state 66

    (68) math_expression -> value math_op . value
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 78

    value                          shift and go to state 98
    list_element_extraction        shift and go to state 49

state 67

    (101) math_op -> PLUS .

    INTEGER         reduce using rule 101 (math_op -> PLUS .)
    DECIMAL         reduce using rule 101 (math_op -> PLUS .)
    CHARACTER       reduce using rule 101 (math_op -> PLUS .)
    STRING          reduce using rule 101 (math_op -> PLUS .)
    TRUE            reduce using rule 101 (math_op -> PLUS .)
    FALSE           reduce using rule 101 (math_op -> PLUS .)
    ID              reduce using rule 101 (math_op -> PLUS .)


state 68

    (102) math_op -> MINUS .

    INTEGER         reduce using rule 102 (math_op -> MINUS .)
    DECIMAL         reduce using rule 102 (math_op -> MINUS .)
    CHARACTER       reduce using rule 102 (math_op -> MINUS .)
    STRING          reduce using rule 102 (math_op -> MINUS .)
    TRUE            reduce using rule 102 (math_op -> MINUS .)
    FALSE           reduce using rule 102 (math_op -> MINUS .)
    ID              reduce using rule 102 (math_op -> MINUS .)


state 69

    (103) math_op -> MUL .

    INTEGER         reduce using rule 103 (math_op -> MUL .)
    DECIMAL         reduce using rule 103 (math_op -> MUL .)
    CHARACTER       reduce using rule 103 (math_op -> MUL .)
    STRING          reduce using rule 103 (math_op -> MUL .)
    TRUE            reduce using rule 103 (math_op -> MUL .)
    FALSE           reduce using rule 103 (math_op -> MUL .)
    ID              reduce using rule 103 (math_op -> MUL .)


state 70

    (104) math_op -> DIV .

    INTEGER         reduce using rule 104 (math_op -> DIV .)
    DECIMAL         reduce using rule 104 (math_op -> DIV .)
    CHARACTER       reduce using rule 104 (math_op -> DIV .)
    STRING          reduce using rule 104 (math_op -> DIV .)
    TRUE            reduce using rule 104 (math_op -> DIV .)
    FALSE           reduce using rule 104 (math_op -> DIV .)
    ID              reduce using rule 104 (math_op -> DIV .)


state 71

    (105) math_op -> MOD .

    INTEGER         reduce using rule 105 (math_op -> MOD .)
    DECIMAL         reduce using rule 105 (math_op -> MOD .)
    CHARACTER       reduce using rule 105 (math_op -> MOD .)
    STRING          reduce using rule 105 (math_op -> MOD .)
    TRUE            reduce using rule 105 (math_op -> MOD .)
    FALSE           reduce using rule 105 (math_op -> MOD .)
    ID              reduce using rule 105 (math_op -> MOD .)


state 72

    (62) value_expression -> L_BRACKET value_expression . R_BRACKET
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_BRACKET       shift and go to state 99
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 73

    (65) math_expression -> L_BRACKET math_expression . R_BRACKET
    (58) value_expression -> math_expression .

  ! shift/reduce conflict for R_BRACKET resolved as shift
    R_BRACKET       shift and go to state 100
    EQUAL           reduce using rule 58 (value_expression -> math_expression .)
    NOT_EQUAL       reduce using rule 58 (value_expression -> math_expression .)
    GREATER         reduce using rule 58 (value_expression -> math_expression .)
    GREATER_EQUAL   reduce using rule 58 (value_expression -> math_expression .)
    LESSER          reduce using rule 58 (value_expression -> math_expression .)
    LESSER_EQUAL    reduce using rule 58 (value_expression -> math_expression .)

  ! R_BRACKET       [ reduce using rule 58 (value_expression -> math_expression .) ]


state 74

    (72) logical_expression -> L_BRACKET logical_expression . R_BRACKET
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

    R_BRACKET       shift and go to state 101
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

    bool_op                        shift and go to state 82

state 75

    (66) math_expression -> MINUS math_expression .

    EQUAL           reduce using rule 66 (math_expression -> MINUS math_expression .)
    NOT_EQUAL       reduce using rule 66 (math_expression -> MINUS math_expression .)
    GREATER         reduce using rule 66 (math_expression -> MINUS math_expression .)
    GREATER_EQUAL   reduce using rule 66 (math_expression -> MINUS math_expression .)
    LESSER          reduce using rule 66 (math_expression -> MINUS math_expression .)
    LESSER_EQUAL    reduce using rule 66 (math_expression -> MINUS math_expression .)
    R_SQUARE_BRACKET reduce using rule 66 (math_expression -> MINUS math_expression .)
    SEMICOLON       reduce using rule 66 (math_expression -> MINUS math_expression .)
    R_BRACKET       reduce using rule 66 (math_expression -> MINUS math_expression .)
    COMMA           reduce using rule 66 (math_expression -> MINUS math_expression .)
    R_BRACE         reduce using rule 66 (math_expression -> MINUS math_expression .)
    QUESTION_MARK   reduce using rule 66 (math_expression -> MINUS math_expression .)
    AND             reduce using rule 66 (math_expression -> MINUS math_expression .)
    OR              reduce using rule 66 (math_expression -> MINUS math_expression .)
    COLON           reduce using rule 66 (math_expression -> MINUS math_expression .)


state 76

    (67) math_expression -> MINUS value .
    (68) math_expression -> value . math_op value
    (101) math_op -> . PLUS
    (102) math_op -> . MINUS
    (103) math_op -> . MUL
    (104) math_op -> . DIV
    (105) math_op -> . MOD

    EQUAL           reduce using rule 67 (math_expression -> MINUS value .)
    NOT_EQUAL       reduce using rule 67 (math_expression -> MINUS value .)
    GREATER         reduce using rule 67 (math_expression -> MINUS value .)
    GREATER_EQUAL   reduce using rule 67 (math_expression -> MINUS value .)
    LESSER          reduce using rule 67 (math_expression -> MINUS value .)
    LESSER_EQUAL    reduce using rule 67 (math_expression -> MINUS value .)
    R_SQUARE_BRACKET reduce using rule 67 (math_expression -> MINUS value .)
    SEMICOLON       reduce using rule 67 (math_expression -> MINUS value .)
    R_BRACKET       reduce using rule 67 (math_expression -> MINUS value .)
    COMMA           reduce using rule 67 (math_expression -> MINUS value .)
    R_BRACE         reduce using rule 67 (math_expression -> MINUS value .)
    QUESTION_MARK   reduce using rule 67 (math_expression -> MINUS value .)
    AND             reduce using rule 67 (math_expression -> MINUS value .)
    OR              reduce using rule 67 (math_expression -> MINUS value .)
    COLON           reduce using rule 67 (math_expression -> MINUS value .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

    math_op                        shift and go to state 66

state 77

    (65) math_expression -> L_BRACKET . math_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    L_BRACKET       shift and go to state 77
    MINUS           shift and go to state 41
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    ID              shift and go to state 78

    math_expression                shift and go to state 102
    value                          shift and go to state 103
    list_element_extraction        shift and go to state 49

state 78

    (96) value -> ID .
    (98) list_element_extraction -> ID . L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    PLUS            reduce using rule 96 (value -> ID .)
    MINUS           reduce using rule 96 (value -> ID .)
    MUL             reduce using rule 96 (value -> ID .)
    DIV             reduce using rule 96 (value -> ID .)
    MOD             reduce using rule 96 (value -> ID .)
    EQUAL           reduce using rule 96 (value -> ID .)
    NOT_EQUAL       reduce using rule 96 (value -> ID .)
    GREATER         reduce using rule 96 (value -> ID .)
    GREATER_EQUAL   reduce using rule 96 (value -> ID .)
    LESSER          reduce using rule 96 (value -> ID .)
    LESSER_EQUAL    reduce using rule 96 (value -> ID .)
    R_SQUARE_BRACKET reduce using rule 96 (value -> ID .)
    SEMICOLON       reduce using rule 96 (value -> ID .)
    R_BRACKET       reduce using rule 96 (value -> ID .)
    COMMA           reduce using rule 96 (value -> ID .)
    R_BRACE         reduce using rule 96 (value -> ID .)
    QUESTION_MARK   reduce using rule 96 (value -> ID .)
    AND             reduce using rule 96 (value -> ID .)
    OR              reduce using rule 96 (value -> ID .)
    COLON           reduce using rule 96 (value -> ID .)
    L_SQUARE_BRACKET shift and go to state 80


state 79

    (73) function_expression -> ID L_BRACKET . opt_listed_values R_BRACKET
    (125) opt_listed_values -> . listed_values
    (126) opt_listed_values -> . empty
    (99) listed_values -> . value_expression COMMA value_expression
    (100) listed_values -> . value_expression COMMA listed_values
    (131) empty -> .
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    R_BRACKET       reduce using rule 131 (empty -> .)
    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    opt_listed_values              shift and go to state 104
    listed_values                  shift and go to state 105
    empty                          shift and go to state 106
    value_expression               shift and go to state 107
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 80

    (98) list_element_extraction -> ID L_SQUARE_BRACKET . value_expression R_SQUARE_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    value_expression               shift and go to state 108
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 81

    (74) trinary_mark_expression -> logical_expression QUESTION_MARK . value_expression COLON value_expression
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    logical_expression             shift and go to state 50
    value_expression               shift and go to state 109
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 82

    (69) logical_expression -> logical_expression bool_op . logical_expression
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    logical_expression             shift and go to state 110
    value_expression               shift and go to state 86
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 83

    (108) bool_op -> AND .

    NEGATION        reduce using rule 108 (bool_op -> AND .)
    L_BRACKET       reduce using rule 108 (bool_op -> AND .)
    MINUS           reduce using rule 108 (bool_op -> AND .)
    ID              reduce using rule 108 (bool_op -> AND .)
    INTEGER         reduce using rule 108 (bool_op -> AND .)
    DECIMAL         reduce using rule 108 (bool_op -> AND .)
    CHARACTER       reduce using rule 108 (bool_op -> AND .)
    STRING          reduce using rule 108 (bool_op -> AND .)
    TRUE            reduce using rule 108 (bool_op -> AND .)
    FALSE           reduce using rule 108 (bool_op -> AND .)


state 84

    (109) bool_op -> OR .

    NEGATION        reduce using rule 109 (bool_op -> OR .)
    L_BRACKET       reduce using rule 109 (bool_op -> OR .)
    MINUS           reduce using rule 109 (bool_op -> OR .)
    ID              reduce using rule 109 (bool_op -> OR .)
    INTEGER         reduce using rule 109 (bool_op -> OR .)
    DECIMAL         reduce using rule 109 (bool_op -> OR .)
    CHARACTER       reduce using rule 109 (bool_op -> OR .)
    STRING          reduce using rule 109 (bool_op -> OR .)
    TRUE            reduce using rule 109 (bool_op -> OR .)
    FALSE           reduce using rule 109 (bool_op -> OR .)


state 85

    (70) logical_expression -> NEGATION logical_expression .
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_BRACKET       reduce using rule 70 (logical_expression -> NEGATION logical_expression .)
    SEMICOLON       reduce using rule 70 (logical_expression -> NEGATION logical_expression .)
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

  ! QUESTION_MARK   [ reduce using rule 70 (logical_expression -> NEGATION logical_expression .) ]
  ! AND             [ reduce using rule 70 (logical_expression -> NEGATION logical_expression .) ]
  ! OR              [ reduce using rule 70 (logical_expression -> NEGATION logical_expression .) ]

    bool_op                        shift and go to state 82

state 86

    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 87

    (72) logical_expression -> L_BRACKET . logical_expression R_BRACKET
    (62) value_expression -> L_BRACKET . value_expression R_BRACKET
    (65) math_expression -> L_BRACKET . math_expression R_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    logical_expression             shift and go to state 74
    value_expression               shift and go to state 72
    math_expression                shift and go to state 73
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 88

    (30) declaration_statement -> CONST type ID opt_array_mark SEMICOLON .

    COMMENT         reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    PREPROCESSOR_LINE reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    CONST           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    INT             reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    FLOAT           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    DOUBLE          reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    CHAR            reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    BOOL            reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    LONG            reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    VOID            reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    $end            reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    SEMICOLON       reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    RETURN          reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    WHILE           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    DO              reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    BREAK           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    FOR             reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    PRINTF          reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    SCANF           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    ID              reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    IF              reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    INCREMENT       reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    DECREMENT       reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    R_BRACE         reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    NEGATION        reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    L_BRACKET       reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    MINUS           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    INTEGER         reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    DECIMAL         reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    CHARACTER       reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    STRING          reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    TRUE            reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)
    FALSE           reduce using rule 30 (declaration_statement -> CONST type ID opt_array_mark SEMICOLON .)


state 89

    (31) declaration_statement -> CONST type ID opt_array_mark ASSIGN . declaration_value_expression SEMICOLON
    (55) declaration_value_expression -> . value_expression
    (56) declaration_value_expression -> . L_BRACE listed_values R_BRACE
    (57) declaration_value_expression -> . L_BRACE declaration_value_expression R_BRACE
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACE         shift and go to state 55
    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    declaration_value_expression   shift and go to state 111
    value_expression               shift and go to state 54
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 90

    (29) declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .

    COMMENT         reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    PREPROCESSOR_LINE reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    CONST           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    INT             reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    FLOAT           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DOUBLE          reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    CHAR            reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    BOOL            reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    LONG            reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    VOID            reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    $end            reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    SEMICOLON       reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    RETURN          reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    WHILE           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DO              reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    BREAK           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    FOR             reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    PRINTF          reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    SCANF           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    ID              reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    IF              reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    INCREMENT       reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DECREMENT       reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    R_BRACE         reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    NEGATION        reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    L_BRACKET       reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    MINUS           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    INTEGER         reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DECIMAL         reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    CHARACTER       reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    STRING          reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    TRUE            reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    FALSE           reduce using rule 29 (declaration_statement -> type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)


state 91

    (56) declaration_value_expression -> L_BRACE listed_values . R_BRACE

    R_BRACE         shift and go to state 112


state 92

    (57) declaration_value_expression -> L_BRACE declaration_value_expression . R_BRACE

    R_BRACE         shift and go to state 113


state 93

    (99) listed_values -> value_expression . COMMA value_expression
    (100) listed_values -> value_expression . COMMA listed_values
    (55) declaration_value_expression -> value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    COMMA           shift and go to state 114
    R_BRACE         reduce using rule 55 (declaration_value_expression -> value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 94

    (128) args -> type ID COMMA . args
    (127) args -> . type ID
    (128) args -> . type ID COMMA args
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 29
    args                           shift and go to state 115

state 95

    (32) function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .

    COMMENT         reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    PREPROCESSOR_LINE reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    CONST           reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    INT             reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    FLOAT           reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    DOUBLE          reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    CHAR            reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    BOOL            reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    LONG            reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    VOID            reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)
    $end            reduce using rule 32 (function_definition_statement -> type ID L_BRACKET opt_args R_BRACKET statements_block .)


state 96

    (16) statements_block -> L_BRACE . opt_statements R_BRACE
    (14) opt_statements -> . statements
    (15) opt_statements -> . empty
    (12) statements -> . statement
    (13) statements -> . statement statements
    (131) empty -> .
    (9) statement -> . any_statement
    (10) statement -> . COMMENT
    (11) statement -> . SEMICOLON
    (17) any_statement -> . declaration_statement
    (18) any_statement -> . assign_statement
    (19) any_statement -> . function_statement
    (20) any_statement -> . return_statement
    (21) any_statement -> . while_loop_statement
    (22) any_statement -> . do_while_loop_statement
    (23) any_statement -> . break_statement
    (24) any_statement -> . for_loop_statement
    (25) any_statement -> . if_statement_block
    (26) any_statement -> . print_statement
    (27) any_statement -> . scan_statement
    (28) declaration_statement -> . type ID opt_array_mark SEMICOLON
    (29) declaration_statement -> . type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (30) declaration_statement -> . CONST type ID opt_array_mark SEMICOLON
    (31) declaration_statement -> . CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (33) assign_statement -> . assign_expression SEMICOLON
    (34) function_statement -> . function_expression SEMICOLON
    (35) return_statement -> . RETURN value_expression SEMICOLON
    (37) while_loop_statement -> . WHILE L_BRACKET logical_expression R_BRACKET statements_block
    (38) while_loop_statement -> . WHILE L_BRACKET value_expression R_BRACKET statements_block
    (39) do_while_loop_statement -> . DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON
    (40) do_while_loop_statement -> . DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON
    (36) break_statement -> . BREAK SEMICOLON
    (41) for_loop_statement -> . FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block
    (44) if_statement_block -> . if_statement
    (45) if_statement_block -> . if_statement else_else_if_statements_block
    (53) print_statement -> . PRINTF L_BRACKET value_expression R_BRACKET
    (54) scan_statement -> . SCANF L_BRACKET AMPERSAND ID R_BRACKET
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID
    (75) assign_expression -> . ID assign_op value_expression
    (76) assign_expression -> . list_element_extraction assign_op value_expression
    (77) assign_expression -> . unary_op ID
    (78) assign_expression -> . ID unary_op
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (46) if_statement -> . IF L_BRACKET logical_expression R_BRACKET statements_block
    (47) if_statement -> . IF L_BRACKET value_expression R_BRACKET statements_block
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (106) unary_op -> . INCREMENT
    (107) unary_op -> . DECREMENT

    R_BRACE         reduce using rule 131 (empty -> .)
    COMMENT         shift and go to state 121
    SEMICOLON       shift and go to state 122
    CONST           shift and go to state 10
    RETURN          shift and go to state 138
    WHILE           shift and go to state 139
    DO              shift and go to state 140
    BREAK           shift and go to state 141
    FOR             shift and go to state 142
    PRINTF          shift and go to state 144
    SCANF           shift and go to state 145
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17
    ID              shift and go to state 135
    IF              shift and go to state 148
    INCREMENT       shift and go to state 149
    DECREMENT       shift and go to state 150

    opt_statements                 shift and go to state 116
    statements                     shift and go to state 117
    empty                          shift and go to state 118
    statement                      shift and go to state 119
    any_statement                  shift and go to state 120
    declaration_statement          shift and go to state 123
    assign_statement               shift and go to state 124
    function_statement             shift and go to state 125
    return_statement               shift and go to state 126
    while_loop_statement           shift and go to state 127
    do_while_loop_statement        shift and go to state 128
    break_statement                shift and go to state 129
    for_loop_statement             shift and go to state 130
    if_statement_block             shift and go to state 131
    print_statement                shift and go to state 132
    scan_statement                 shift and go to state 133
    type                           shift and go to state 134
    assign_expression              shift and go to state 136
    function_expression            shift and go to state 137
    if_statement                   shift and go to state 143
    list_element_extraction        shift and go to state 146
    unary_op                       shift and go to state 147

state 97

    (71) logical_expression -> value_expression comparison_op value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    QUESTION_MARK   reduce using rule 71 (logical_expression -> value_expression comparison_op value_expression .)
    AND             reduce using rule 71 (logical_expression -> value_expression comparison_op value_expression .)
    OR              reduce using rule 71 (logical_expression -> value_expression comparison_op value_expression .)
    R_BRACKET       reduce using rule 71 (logical_expression -> value_expression comparison_op value_expression .)
    SEMICOLON       reduce using rule 71 (logical_expression -> value_expression comparison_op value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 98

    (68) math_expression -> value math_op value .

    EQUAL           reduce using rule 68 (math_expression -> value math_op value .)
    NOT_EQUAL       reduce using rule 68 (math_expression -> value math_op value .)
    GREATER         reduce using rule 68 (math_expression -> value math_op value .)
    GREATER_EQUAL   reduce using rule 68 (math_expression -> value math_op value .)
    LESSER          reduce using rule 68 (math_expression -> value math_op value .)
    LESSER_EQUAL    reduce using rule 68 (math_expression -> value math_op value .)
    R_SQUARE_BRACKET reduce using rule 68 (math_expression -> value math_op value .)
    SEMICOLON       reduce using rule 68 (math_expression -> value math_op value .)
    R_BRACKET       reduce using rule 68 (math_expression -> value math_op value .)
    COMMA           reduce using rule 68 (math_expression -> value math_op value .)
    R_BRACE         reduce using rule 68 (math_expression -> value math_op value .)
    QUESTION_MARK   reduce using rule 68 (math_expression -> value math_op value .)
    AND             reduce using rule 68 (math_expression -> value math_op value .)
    OR              reduce using rule 68 (math_expression -> value math_op value .)
    COLON           reduce using rule 68 (math_expression -> value math_op value .)


state 99

    (62) value_expression -> L_BRACKET value_expression R_BRACKET .

    EQUAL           reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    NOT_EQUAL       reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    GREATER         reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    GREATER_EQUAL   reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    LESSER          reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    LESSER_EQUAL    reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    SEMICOLON       reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    R_BRACKET       reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    COMMA           reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    R_BRACE         reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    QUESTION_MARK   reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    AND             reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    OR              reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)
    COLON           reduce using rule 62 (value_expression -> L_BRACKET value_expression R_BRACKET .)


state 100

    (65) math_expression -> L_BRACKET math_expression R_BRACKET .

    EQUAL           reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    NOT_EQUAL       reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    GREATER         reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    GREATER_EQUAL   reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    LESSER          reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    LESSER_EQUAL    reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    SEMICOLON       reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    R_BRACKET       reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    COMMA           reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    R_BRACE         reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    QUESTION_MARK   reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    AND             reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    OR              reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)
    COLON           reduce using rule 65 (math_expression -> L_BRACKET math_expression R_BRACKET .)


state 101

    (72) logical_expression -> L_BRACKET logical_expression R_BRACKET .

    QUESTION_MARK   reduce using rule 72 (logical_expression -> L_BRACKET logical_expression R_BRACKET .)
    AND             reduce using rule 72 (logical_expression -> L_BRACKET logical_expression R_BRACKET .)
    OR              reduce using rule 72 (logical_expression -> L_BRACKET logical_expression R_BRACKET .)
    R_BRACKET       reduce using rule 72 (logical_expression -> L_BRACKET logical_expression R_BRACKET .)
    SEMICOLON       reduce using rule 72 (logical_expression -> L_BRACKET logical_expression R_BRACKET .)


state 102

    (65) math_expression -> L_BRACKET math_expression . R_BRACKET

    R_BRACKET       shift and go to state 100


state 103

    (68) math_expression -> value . math_op value
    (101) math_op -> . PLUS
    (102) math_op -> . MINUS
    (103) math_op -> . MUL
    (104) math_op -> . DIV
    (105) math_op -> . MOD

    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MUL             shift and go to state 69
    DIV             shift and go to state 70
    MOD             shift and go to state 71

    math_op                        shift and go to state 66

state 104

    (73) function_expression -> ID L_BRACKET opt_listed_values . R_BRACKET

    R_BRACKET       shift and go to state 151


state 105

    (125) opt_listed_values -> listed_values .

    R_BRACKET       reduce using rule 125 (opt_listed_values -> listed_values .)


state 106

    (126) opt_listed_values -> empty .

    R_BRACKET       reduce using rule 126 (opt_listed_values -> empty .)


state 107

    (99) listed_values -> value_expression . COMMA value_expression
    (100) listed_values -> value_expression . COMMA listed_values
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    COMMA           shift and go to state 114
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 108

    (98) list_element_extraction -> ID L_SQUARE_BRACKET value_expression . R_SQUARE_BRACKET
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_SQUARE_BRACKET shift and go to state 152
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 109

    (74) trinary_mark_expression -> logical_expression QUESTION_MARK value_expression . COLON value_expression
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    COLON           shift and go to state 153
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 110

    (69) logical_expression -> logical_expression bool_op logical_expression .
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

  ! shift/reduce conflict for QUESTION_MARK resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    R_BRACKET       reduce using rule 69 (logical_expression -> logical_expression bool_op logical_expression .)
    SEMICOLON       reduce using rule 69 (logical_expression -> logical_expression bool_op logical_expression .)
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

  ! QUESTION_MARK   [ reduce using rule 69 (logical_expression -> logical_expression bool_op logical_expression .) ]
  ! AND             [ reduce using rule 69 (logical_expression -> logical_expression bool_op logical_expression .) ]
  ! OR              [ reduce using rule 69 (logical_expression -> logical_expression bool_op logical_expression .) ]

    bool_op                        shift and go to state 82

state 111

    (31) declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression . SEMICOLON

    SEMICOLON       shift and go to state 154


state 112

    (56) declaration_value_expression -> L_BRACE listed_values R_BRACE .

    SEMICOLON       reduce using rule 56 (declaration_value_expression -> L_BRACE listed_values R_BRACE .)
    R_BRACE         reduce using rule 56 (declaration_value_expression -> L_BRACE listed_values R_BRACE .)


state 113

    (57) declaration_value_expression -> L_BRACE declaration_value_expression R_BRACE .

    SEMICOLON       reduce using rule 57 (declaration_value_expression -> L_BRACE declaration_value_expression R_BRACE .)
    R_BRACE         reduce using rule 57 (declaration_value_expression -> L_BRACE declaration_value_expression R_BRACE .)


state 114

    (99) listed_values -> value_expression COMMA . value_expression
    (100) listed_values -> value_expression COMMA . listed_values
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (99) listed_values -> . value_expression COMMA value_expression
    (100) listed_values -> . value_expression COMMA listed_values
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    value_expression               shift and go to state 155
    listed_values                  shift and go to state 156
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 115

    (128) args -> type ID COMMA args .

    R_BRACKET       reduce using rule 128 (args -> type ID COMMA args .)


state 116

    (16) statements_block -> L_BRACE opt_statements . R_BRACE

    R_BRACE         shift and go to state 157


state 117

    (14) opt_statements -> statements .

    R_BRACE         reduce using rule 14 (opt_statements -> statements .)


state 118

    (15) opt_statements -> empty .

    R_BRACE         reduce using rule 15 (opt_statements -> empty .)


state 119

    (12) statements -> statement .
    (13) statements -> statement . statements
    (12) statements -> . statement
    (13) statements -> . statement statements
    (9) statement -> . any_statement
    (10) statement -> . COMMENT
    (11) statement -> . SEMICOLON
    (17) any_statement -> . declaration_statement
    (18) any_statement -> . assign_statement
    (19) any_statement -> . function_statement
    (20) any_statement -> . return_statement
    (21) any_statement -> . while_loop_statement
    (22) any_statement -> . do_while_loop_statement
    (23) any_statement -> . break_statement
    (24) any_statement -> . for_loop_statement
    (25) any_statement -> . if_statement_block
    (26) any_statement -> . print_statement
    (27) any_statement -> . scan_statement
    (28) declaration_statement -> . type ID opt_array_mark SEMICOLON
    (29) declaration_statement -> . type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (30) declaration_statement -> . CONST type ID opt_array_mark SEMICOLON
    (31) declaration_statement -> . CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (33) assign_statement -> . assign_expression SEMICOLON
    (34) function_statement -> . function_expression SEMICOLON
    (35) return_statement -> . RETURN value_expression SEMICOLON
    (37) while_loop_statement -> . WHILE L_BRACKET logical_expression R_BRACKET statements_block
    (38) while_loop_statement -> . WHILE L_BRACKET value_expression R_BRACKET statements_block
    (39) do_while_loop_statement -> . DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON
    (40) do_while_loop_statement -> . DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON
    (36) break_statement -> . BREAK SEMICOLON
    (41) for_loop_statement -> . FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block
    (44) if_statement_block -> . if_statement
    (45) if_statement_block -> . if_statement else_else_if_statements_block
    (53) print_statement -> . PRINTF L_BRACKET value_expression R_BRACKET
    (54) scan_statement -> . SCANF L_BRACKET AMPERSAND ID R_BRACKET
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID
    (75) assign_expression -> . ID assign_op value_expression
    (76) assign_expression -> . list_element_extraction assign_op value_expression
    (77) assign_expression -> . unary_op ID
    (78) assign_expression -> . ID unary_op
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (46) if_statement -> . IF L_BRACKET logical_expression R_BRACKET statements_block
    (47) if_statement -> . IF L_BRACKET value_expression R_BRACKET statements_block
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (106) unary_op -> . INCREMENT
    (107) unary_op -> . DECREMENT

    R_BRACE         reduce using rule 12 (statements -> statement .)
    COMMENT         shift and go to state 121
    SEMICOLON       shift and go to state 122
    CONST           shift and go to state 10
    RETURN          shift and go to state 138
    WHILE           shift and go to state 139
    DO              shift and go to state 140
    BREAK           shift and go to state 141
    FOR             shift and go to state 142
    PRINTF          shift and go to state 144
    SCANF           shift and go to state 145
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17
    ID              shift and go to state 135
    IF              shift and go to state 148
    INCREMENT       shift and go to state 149
    DECREMENT       shift and go to state 150

    statement                      shift and go to state 119
    statements                     shift and go to state 158
    any_statement                  shift and go to state 120
    declaration_statement          shift and go to state 123
    assign_statement               shift and go to state 124
    function_statement             shift and go to state 125
    return_statement               shift and go to state 126
    while_loop_statement           shift and go to state 127
    do_while_loop_statement        shift and go to state 128
    break_statement                shift and go to state 129
    for_loop_statement             shift and go to state 130
    if_statement_block             shift and go to state 131
    print_statement                shift and go to state 132
    scan_statement                 shift and go to state 133
    type                           shift and go to state 134
    assign_expression              shift and go to state 136
    function_expression            shift and go to state 137
    if_statement                   shift and go to state 143
    list_element_extraction        shift and go to state 146
    unary_op                       shift and go to state 147

state 120

    (9) statement -> any_statement .

    COMMENT         reduce using rule 9 (statement -> any_statement .)
    SEMICOLON       reduce using rule 9 (statement -> any_statement .)
    CONST           reduce using rule 9 (statement -> any_statement .)
    RETURN          reduce using rule 9 (statement -> any_statement .)
    WHILE           reduce using rule 9 (statement -> any_statement .)
    DO              reduce using rule 9 (statement -> any_statement .)
    BREAK           reduce using rule 9 (statement -> any_statement .)
    FOR             reduce using rule 9 (statement -> any_statement .)
    PRINTF          reduce using rule 9 (statement -> any_statement .)
    SCANF           reduce using rule 9 (statement -> any_statement .)
    INT             reduce using rule 9 (statement -> any_statement .)
    FLOAT           reduce using rule 9 (statement -> any_statement .)
    DOUBLE          reduce using rule 9 (statement -> any_statement .)
    CHAR            reduce using rule 9 (statement -> any_statement .)
    BOOL            reduce using rule 9 (statement -> any_statement .)
    LONG            reduce using rule 9 (statement -> any_statement .)
    VOID            reduce using rule 9 (statement -> any_statement .)
    ID              reduce using rule 9 (statement -> any_statement .)
    IF              reduce using rule 9 (statement -> any_statement .)
    INCREMENT       reduce using rule 9 (statement -> any_statement .)
    DECREMENT       reduce using rule 9 (statement -> any_statement .)
    R_BRACE         reduce using rule 9 (statement -> any_statement .)


state 121

    (10) statement -> COMMENT .

    COMMENT         reduce using rule 10 (statement -> COMMENT .)
    SEMICOLON       reduce using rule 10 (statement -> COMMENT .)
    CONST           reduce using rule 10 (statement -> COMMENT .)
    RETURN          reduce using rule 10 (statement -> COMMENT .)
    WHILE           reduce using rule 10 (statement -> COMMENT .)
    DO              reduce using rule 10 (statement -> COMMENT .)
    BREAK           reduce using rule 10 (statement -> COMMENT .)
    FOR             reduce using rule 10 (statement -> COMMENT .)
    PRINTF          reduce using rule 10 (statement -> COMMENT .)
    SCANF           reduce using rule 10 (statement -> COMMENT .)
    INT             reduce using rule 10 (statement -> COMMENT .)
    FLOAT           reduce using rule 10 (statement -> COMMENT .)
    DOUBLE          reduce using rule 10 (statement -> COMMENT .)
    CHAR            reduce using rule 10 (statement -> COMMENT .)
    BOOL            reduce using rule 10 (statement -> COMMENT .)
    LONG            reduce using rule 10 (statement -> COMMENT .)
    VOID            reduce using rule 10 (statement -> COMMENT .)
    ID              reduce using rule 10 (statement -> COMMENT .)
    IF              reduce using rule 10 (statement -> COMMENT .)
    INCREMENT       reduce using rule 10 (statement -> COMMENT .)
    DECREMENT       reduce using rule 10 (statement -> COMMENT .)
    R_BRACE         reduce using rule 10 (statement -> COMMENT .)


state 122

    (11) statement -> SEMICOLON .

    COMMENT         reduce using rule 11 (statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 11 (statement -> SEMICOLON .)
    CONST           reduce using rule 11 (statement -> SEMICOLON .)
    RETURN          reduce using rule 11 (statement -> SEMICOLON .)
    WHILE           reduce using rule 11 (statement -> SEMICOLON .)
    DO              reduce using rule 11 (statement -> SEMICOLON .)
    BREAK           reduce using rule 11 (statement -> SEMICOLON .)
    FOR             reduce using rule 11 (statement -> SEMICOLON .)
    PRINTF          reduce using rule 11 (statement -> SEMICOLON .)
    SCANF           reduce using rule 11 (statement -> SEMICOLON .)
    INT             reduce using rule 11 (statement -> SEMICOLON .)
    FLOAT           reduce using rule 11 (statement -> SEMICOLON .)
    DOUBLE          reduce using rule 11 (statement -> SEMICOLON .)
    CHAR            reduce using rule 11 (statement -> SEMICOLON .)
    BOOL            reduce using rule 11 (statement -> SEMICOLON .)
    LONG            reduce using rule 11 (statement -> SEMICOLON .)
    VOID            reduce using rule 11 (statement -> SEMICOLON .)
    ID              reduce using rule 11 (statement -> SEMICOLON .)
    IF              reduce using rule 11 (statement -> SEMICOLON .)
    INCREMENT       reduce using rule 11 (statement -> SEMICOLON .)
    DECREMENT       reduce using rule 11 (statement -> SEMICOLON .)
    R_BRACE         reduce using rule 11 (statement -> SEMICOLON .)


state 123

    (17) any_statement -> declaration_statement .

    COMMENT         reduce using rule 17 (any_statement -> declaration_statement .)
    SEMICOLON       reduce using rule 17 (any_statement -> declaration_statement .)
    CONST           reduce using rule 17 (any_statement -> declaration_statement .)
    RETURN          reduce using rule 17 (any_statement -> declaration_statement .)
    WHILE           reduce using rule 17 (any_statement -> declaration_statement .)
    DO              reduce using rule 17 (any_statement -> declaration_statement .)
    BREAK           reduce using rule 17 (any_statement -> declaration_statement .)
    FOR             reduce using rule 17 (any_statement -> declaration_statement .)
    PRINTF          reduce using rule 17 (any_statement -> declaration_statement .)
    SCANF           reduce using rule 17 (any_statement -> declaration_statement .)
    INT             reduce using rule 17 (any_statement -> declaration_statement .)
    FLOAT           reduce using rule 17 (any_statement -> declaration_statement .)
    DOUBLE          reduce using rule 17 (any_statement -> declaration_statement .)
    CHAR            reduce using rule 17 (any_statement -> declaration_statement .)
    BOOL            reduce using rule 17 (any_statement -> declaration_statement .)
    LONG            reduce using rule 17 (any_statement -> declaration_statement .)
    VOID            reduce using rule 17 (any_statement -> declaration_statement .)
    ID              reduce using rule 17 (any_statement -> declaration_statement .)
    IF              reduce using rule 17 (any_statement -> declaration_statement .)
    INCREMENT       reduce using rule 17 (any_statement -> declaration_statement .)
    DECREMENT       reduce using rule 17 (any_statement -> declaration_statement .)
    R_BRACE         reduce using rule 17 (any_statement -> declaration_statement .)


state 124

    (18) any_statement -> assign_statement .

    COMMENT         reduce using rule 18 (any_statement -> assign_statement .)
    SEMICOLON       reduce using rule 18 (any_statement -> assign_statement .)
    CONST           reduce using rule 18 (any_statement -> assign_statement .)
    RETURN          reduce using rule 18 (any_statement -> assign_statement .)
    WHILE           reduce using rule 18 (any_statement -> assign_statement .)
    DO              reduce using rule 18 (any_statement -> assign_statement .)
    BREAK           reduce using rule 18 (any_statement -> assign_statement .)
    FOR             reduce using rule 18 (any_statement -> assign_statement .)
    PRINTF          reduce using rule 18 (any_statement -> assign_statement .)
    SCANF           reduce using rule 18 (any_statement -> assign_statement .)
    INT             reduce using rule 18 (any_statement -> assign_statement .)
    FLOAT           reduce using rule 18 (any_statement -> assign_statement .)
    DOUBLE          reduce using rule 18 (any_statement -> assign_statement .)
    CHAR            reduce using rule 18 (any_statement -> assign_statement .)
    BOOL            reduce using rule 18 (any_statement -> assign_statement .)
    LONG            reduce using rule 18 (any_statement -> assign_statement .)
    VOID            reduce using rule 18 (any_statement -> assign_statement .)
    ID              reduce using rule 18 (any_statement -> assign_statement .)
    IF              reduce using rule 18 (any_statement -> assign_statement .)
    INCREMENT       reduce using rule 18 (any_statement -> assign_statement .)
    DECREMENT       reduce using rule 18 (any_statement -> assign_statement .)
    R_BRACE         reduce using rule 18 (any_statement -> assign_statement .)


state 125

    (19) any_statement -> function_statement .

    COMMENT         reduce using rule 19 (any_statement -> function_statement .)
    SEMICOLON       reduce using rule 19 (any_statement -> function_statement .)
    CONST           reduce using rule 19 (any_statement -> function_statement .)
    RETURN          reduce using rule 19 (any_statement -> function_statement .)
    WHILE           reduce using rule 19 (any_statement -> function_statement .)
    DO              reduce using rule 19 (any_statement -> function_statement .)
    BREAK           reduce using rule 19 (any_statement -> function_statement .)
    FOR             reduce using rule 19 (any_statement -> function_statement .)
    PRINTF          reduce using rule 19 (any_statement -> function_statement .)
    SCANF           reduce using rule 19 (any_statement -> function_statement .)
    INT             reduce using rule 19 (any_statement -> function_statement .)
    FLOAT           reduce using rule 19 (any_statement -> function_statement .)
    DOUBLE          reduce using rule 19 (any_statement -> function_statement .)
    CHAR            reduce using rule 19 (any_statement -> function_statement .)
    BOOL            reduce using rule 19 (any_statement -> function_statement .)
    LONG            reduce using rule 19 (any_statement -> function_statement .)
    VOID            reduce using rule 19 (any_statement -> function_statement .)
    ID              reduce using rule 19 (any_statement -> function_statement .)
    IF              reduce using rule 19 (any_statement -> function_statement .)
    INCREMENT       reduce using rule 19 (any_statement -> function_statement .)
    DECREMENT       reduce using rule 19 (any_statement -> function_statement .)
    R_BRACE         reduce using rule 19 (any_statement -> function_statement .)


state 126

    (20) any_statement -> return_statement .

    COMMENT         reduce using rule 20 (any_statement -> return_statement .)
    SEMICOLON       reduce using rule 20 (any_statement -> return_statement .)
    CONST           reduce using rule 20 (any_statement -> return_statement .)
    RETURN          reduce using rule 20 (any_statement -> return_statement .)
    WHILE           reduce using rule 20 (any_statement -> return_statement .)
    DO              reduce using rule 20 (any_statement -> return_statement .)
    BREAK           reduce using rule 20 (any_statement -> return_statement .)
    FOR             reduce using rule 20 (any_statement -> return_statement .)
    PRINTF          reduce using rule 20 (any_statement -> return_statement .)
    SCANF           reduce using rule 20 (any_statement -> return_statement .)
    INT             reduce using rule 20 (any_statement -> return_statement .)
    FLOAT           reduce using rule 20 (any_statement -> return_statement .)
    DOUBLE          reduce using rule 20 (any_statement -> return_statement .)
    CHAR            reduce using rule 20 (any_statement -> return_statement .)
    BOOL            reduce using rule 20 (any_statement -> return_statement .)
    LONG            reduce using rule 20 (any_statement -> return_statement .)
    VOID            reduce using rule 20 (any_statement -> return_statement .)
    ID              reduce using rule 20 (any_statement -> return_statement .)
    IF              reduce using rule 20 (any_statement -> return_statement .)
    INCREMENT       reduce using rule 20 (any_statement -> return_statement .)
    DECREMENT       reduce using rule 20 (any_statement -> return_statement .)
    R_BRACE         reduce using rule 20 (any_statement -> return_statement .)


state 127

    (21) any_statement -> while_loop_statement .

    COMMENT         reduce using rule 21 (any_statement -> while_loop_statement .)
    SEMICOLON       reduce using rule 21 (any_statement -> while_loop_statement .)
    CONST           reduce using rule 21 (any_statement -> while_loop_statement .)
    RETURN          reduce using rule 21 (any_statement -> while_loop_statement .)
    WHILE           reduce using rule 21 (any_statement -> while_loop_statement .)
    DO              reduce using rule 21 (any_statement -> while_loop_statement .)
    BREAK           reduce using rule 21 (any_statement -> while_loop_statement .)
    FOR             reduce using rule 21 (any_statement -> while_loop_statement .)
    PRINTF          reduce using rule 21 (any_statement -> while_loop_statement .)
    SCANF           reduce using rule 21 (any_statement -> while_loop_statement .)
    INT             reduce using rule 21 (any_statement -> while_loop_statement .)
    FLOAT           reduce using rule 21 (any_statement -> while_loop_statement .)
    DOUBLE          reduce using rule 21 (any_statement -> while_loop_statement .)
    CHAR            reduce using rule 21 (any_statement -> while_loop_statement .)
    BOOL            reduce using rule 21 (any_statement -> while_loop_statement .)
    LONG            reduce using rule 21 (any_statement -> while_loop_statement .)
    VOID            reduce using rule 21 (any_statement -> while_loop_statement .)
    ID              reduce using rule 21 (any_statement -> while_loop_statement .)
    IF              reduce using rule 21 (any_statement -> while_loop_statement .)
    INCREMENT       reduce using rule 21 (any_statement -> while_loop_statement .)
    DECREMENT       reduce using rule 21 (any_statement -> while_loop_statement .)
    R_BRACE         reduce using rule 21 (any_statement -> while_loop_statement .)


state 128

    (22) any_statement -> do_while_loop_statement .

    COMMENT         reduce using rule 22 (any_statement -> do_while_loop_statement .)
    SEMICOLON       reduce using rule 22 (any_statement -> do_while_loop_statement .)
    CONST           reduce using rule 22 (any_statement -> do_while_loop_statement .)
    RETURN          reduce using rule 22 (any_statement -> do_while_loop_statement .)
    WHILE           reduce using rule 22 (any_statement -> do_while_loop_statement .)
    DO              reduce using rule 22 (any_statement -> do_while_loop_statement .)
    BREAK           reduce using rule 22 (any_statement -> do_while_loop_statement .)
    FOR             reduce using rule 22 (any_statement -> do_while_loop_statement .)
    PRINTF          reduce using rule 22 (any_statement -> do_while_loop_statement .)
    SCANF           reduce using rule 22 (any_statement -> do_while_loop_statement .)
    INT             reduce using rule 22 (any_statement -> do_while_loop_statement .)
    FLOAT           reduce using rule 22 (any_statement -> do_while_loop_statement .)
    DOUBLE          reduce using rule 22 (any_statement -> do_while_loop_statement .)
    CHAR            reduce using rule 22 (any_statement -> do_while_loop_statement .)
    BOOL            reduce using rule 22 (any_statement -> do_while_loop_statement .)
    LONG            reduce using rule 22 (any_statement -> do_while_loop_statement .)
    VOID            reduce using rule 22 (any_statement -> do_while_loop_statement .)
    ID              reduce using rule 22 (any_statement -> do_while_loop_statement .)
    IF              reduce using rule 22 (any_statement -> do_while_loop_statement .)
    INCREMENT       reduce using rule 22 (any_statement -> do_while_loop_statement .)
    DECREMENT       reduce using rule 22 (any_statement -> do_while_loop_statement .)
    R_BRACE         reduce using rule 22 (any_statement -> do_while_loop_statement .)


state 129

    (23) any_statement -> break_statement .

    COMMENT         reduce using rule 23 (any_statement -> break_statement .)
    SEMICOLON       reduce using rule 23 (any_statement -> break_statement .)
    CONST           reduce using rule 23 (any_statement -> break_statement .)
    RETURN          reduce using rule 23 (any_statement -> break_statement .)
    WHILE           reduce using rule 23 (any_statement -> break_statement .)
    DO              reduce using rule 23 (any_statement -> break_statement .)
    BREAK           reduce using rule 23 (any_statement -> break_statement .)
    FOR             reduce using rule 23 (any_statement -> break_statement .)
    PRINTF          reduce using rule 23 (any_statement -> break_statement .)
    SCANF           reduce using rule 23 (any_statement -> break_statement .)
    INT             reduce using rule 23 (any_statement -> break_statement .)
    FLOAT           reduce using rule 23 (any_statement -> break_statement .)
    DOUBLE          reduce using rule 23 (any_statement -> break_statement .)
    CHAR            reduce using rule 23 (any_statement -> break_statement .)
    BOOL            reduce using rule 23 (any_statement -> break_statement .)
    LONG            reduce using rule 23 (any_statement -> break_statement .)
    VOID            reduce using rule 23 (any_statement -> break_statement .)
    ID              reduce using rule 23 (any_statement -> break_statement .)
    IF              reduce using rule 23 (any_statement -> break_statement .)
    INCREMENT       reduce using rule 23 (any_statement -> break_statement .)
    DECREMENT       reduce using rule 23 (any_statement -> break_statement .)
    R_BRACE         reduce using rule 23 (any_statement -> break_statement .)


state 130

    (24) any_statement -> for_loop_statement .

    COMMENT         reduce using rule 24 (any_statement -> for_loop_statement .)
    SEMICOLON       reduce using rule 24 (any_statement -> for_loop_statement .)
    CONST           reduce using rule 24 (any_statement -> for_loop_statement .)
    RETURN          reduce using rule 24 (any_statement -> for_loop_statement .)
    WHILE           reduce using rule 24 (any_statement -> for_loop_statement .)
    DO              reduce using rule 24 (any_statement -> for_loop_statement .)
    BREAK           reduce using rule 24 (any_statement -> for_loop_statement .)
    FOR             reduce using rule 24 (any_statement -> for_loop_statement .)
    PRINTF          reduce using rule 24 (any_statement -> for_loop_statement .)
    SCANF           reduce using rule 24 (any_statement -> for_loop_statement .)
    INT             reduce using rule 24 (any_statement -> for_loop_statement .)
    FLOAT           reduce using rule 24 (any_statement -> for_loop_statement .)
    DOUBLE          reduce using rule 24 (any_statement -> for_loop_statement .)
    CHAR            reduce using rule 24 (any_statement -> for_loop_statement .)
    BOOL            reduce using rule 24 (any_statement -> for_loop_statement .)
    LONG            reduce using rule 24 (any_statement -> for_loop_statement .)
    VOID            reduce using rule 24 (any_statement -> for_loop_statement .)
    ID              reduce using rule 24 (any_statement -> for_loop_statement .)
    IF              reduce using rule 24 (any_statement -> for_loop_statement .)
    INCREMENT       reduce using rule 24 (any_statement -> for_loop_statement .)
    DECREMENT       reduce using rule 24 (any_statement -> for_loop_statement .)
    R_BRACE         reduce using rule 24 (any_statement -> for_loop_statement .)


state 131

    (25) any_statement -> if_statement_block .

    COMMENT         reduce using rule 25 (any_statement -> if_statement_block .)
    SEMICOLON       reduce using rule 25 (any_statement -> if_statement_block .)
    CONST           reduce using rule 25 (any_statement -> if_statement_block .)
    RETURN          reduce using rule 25 (any_statement -> if_statement_block .)
    WHILE           reduce using rule 25 (any_statement -> if_statement_block .)
    DO              reduce using rule 25 (any_statement -> if_statement_block .)
    BREAK           reduce using rule 25 (any_statement -> if_statement_block .)
    FOR             reduce using rule 25 (any_statement -> if_statement_block .)
    PRINTF          reduce using rule 25 (any_statement -> if_statement_block .)
    SCANF           reduce using rule 25 (any_statement -> if_statement_block .)
    INT             reduce using rule 25 (any_statement -> if_statement_block .)
    FLOAT           reduce using rule 25 (any_statement -> if_statement_block .)
    DOUBLE          reduce using rule 25 (any_statement -> if_statement_block .)
    CHAR            reduce using rule 25 (any_statement -> if_statement_block .)
    BOOL            reduce using rule 25 (any_statement -> if_statement_block .)
    LONG            reduce using rule 25 (any_statement -> if_statement_block .)
    VOID            reduce using rule 25 (any_statement -> if_statement_block .)
    ID              reduce using rule 25 (any_statement -> if_statement_block .)
    IF              reduce using rule 25 (any_statement -> if_statement_block .)
    INCREMENT       reduce using rule 25 (any_statement -> if_statement_block .)
    DECREMENT       reduce using rule 25 (any_statement -> if_statement_block .)
    R_BRACE         reduce using rule 25 (any_statement -> if_statement_block .)


state 132

    (26) any_statement -> print_statement .

    COMMENT         reduce using rule 26 (any_statement -> print_statement .)
    SEMICOLON       reduce using rule 26 (any_statement -> print_statement .)
    CONST           reduce using rule 26 (any_statement -> print_statement .)
    RETURN          reduce using rule 26 (any_statement -> print_statement .)
    WHILE           reduce using rule 26 (any_statement -> print_statement .)
    DO              reduce using rule 26 (any_statement -> print_statement .)
    BREAK           reduce using rule 26 (any_statement -> print_statement .)
    FOR             reduce using rule 26 (any_statement -> print_statement .)
    PRINTF          reduce using rule 26 (any_statement -> print_statement .)
    SCANF           reduce using rule 26 (any_statement -> print_statement .)
    INT             reduce using rule 26 (any_statement -> print_statement .)
    FLOAT           reduce using rule 26 (any_statement -> print_statement .)
    DOUBLE          reduce using rule 26 (any_statement -> print_statement .)
    CHAR            reduce using rule 26 (any_statement -> print_statement .)
    BOOL            reduce using rule 26 (any_statement -> print_statement .)
    LONG            reduce using rule 26 (any_statement -> print_statement .)
    VOID            reduce using rule 26 (any_statement -> print_statement .)
    ID              reduce using rule 26 (any_statement -> print_statement .)
    IF              reduce using rule 26 (any_statement -> print_statement .)
    INCREMENT       reduce using rule 26 (any_statement -> print_statement .)
    DECREMENT       reduce using rule 26 (any_statement -> print_statement .)
    R_BRACE         reduce using rule 26 (any_statement -> print_statement .)


state 133

    (27) any_statement -> scan_statement .

    COMMENT         reduce using rule 27 (any_statement -> scan_statement .)
    SEMICOLON       reduce using rule 27 (any_statement -> scan_statement .)
    CONST           reduce using rule 27 (any_statement -> scan_statement .)
    RETURN          reduce using rule 27 (any_statement -> scan_statement .)
    WHILE           reduce using rule 27 (any_statement -> scan_statement .)
    DO              reduce using rule 27 (any_statement -> scan_statement .)
    BREAK           reduce using rule 27 (any_statement -> scan_statement .)
    FOR             reduce using rule 27 (any_statement -> scan_statement .)
    PRINTF          reduce using rule 27 (any_statement -> scan_statement .)
    SCANF           reduce using rule 27 (any_statement -> scan_statement .)
    INT             reduce using rule 27 (any_statement -> scan_statement .)
    FLOAT           reduce using rule 27 (any_statement -> scan_statement .)
    DOUBLE          reduce using rule 27 (any_statement -> scan_statement .)
    CHAR            reduce using rule 27 (any_statement -> scan_statement .)
    BOOL            reduce using rule 27 (any_statement -> scan_statement .)
    LONG            reduce using rule 27 (any_statement -> scan_statement .)
    VOID            reduce using rule 27 (any_statement -> scan_statement .)
    ID              reduce using rule 27 (any_statement -> scan_statement .)
    IF              reduce using rule 27 (any_statement -> scan_statement .)
    INCREMENT       reduce using rule 27 (any_statement -> scan_statement .)
    DECREMENT       reduce using rule 27 (any_statement -> scan_statement .)
    R_BRACE         reduce using rule 27 (any_statement -> scan_statement .)


state 134

    (28) declaration_statement -> type . ID opt_array_mark SEMICOLON
    (29) declaration_statement -> type . ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON

    ID              shift and go to state 159


state 135

    (75) assign_expression -> ID . assign_op value_expression
    (78) assign_expression -> ID . unary_op
    (73) function_expression -> ID . L_BRACKET opt_listed_values R_BRACKET
    (98) list_element_extraction -> ID . L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (116) assign_op -> . ASSIGN
    (117) assign_op -> . PLUS_ASSIGN
    (118) assign_op -> . MINUS_ASSIGN
    (119) assign_op -> . MUL_ASSIGN
    (120) assign_op -> . DIV_ASSIGN
    (121) assign_op -> . MOD_ASSIGN
    (106) unary_op -> . INCREMENT
    (107) unary_op -> . DECREMENT

    L_BRACKET       shift and go to state 79
    L_SQUARE_BRACKET shift and go to state 80
    ASSIGN          shift and go to state 162
    PLUS_ASSIGN     shift and go to state 163
    MINUS_ASSIGN    shift and go to state 164
    MUL_ASSIGN      shift and go to state 165
    DIV_ASSIGN      shift and go to state 166
    MOD_ASSIGN      shift and go to state 167
    INCREMENT       shift and go to state 149
    DECREMENT       shift and go to state 150

    assign_op                      shift and go to state 160
    unary_op                       shift and go to state 161

state 136

    (33) assign_statement -> assign_expression . SEMICOLON

    SEMICOLON       shift and go to state 168


state 137

    (34) function_statement -> function_expression . SEMICOLON

    SEMICOLON       shift and go to state 169


state 138

    (35) return_statement -> RETURN . value_expression SEMICOLON
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    value_expression               shift and go to state 170
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 139

    (37) while_loop_statement -> WHILE . L_BRACKET logical_expression R_BRACKET statements_block
    (38) while_loop_statement -> WHILE . L_BRACKET value_expression R_BRACKET statements_block

    L_BRACKET       shift and go to state 171


state 140

    (39) do_while_loop_statement -> DO . statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON
    (40) do_while_loop_statement -> DO . statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 172

state 141

    (36) break_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 173


state 142

    (41) for_loop_statement -> FOR . L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block

    L_BRACKET       shift and go to state 174


state 143

    (44) if_statement_block -> if_statement .
    (45) if_statement_block -> if_statement . else_else_if_statements_block
    (48) else_else_if_statements_block -> . else_statement
    (49) else_else_if_statements_block -> . else_if_statement else_else_if_statements_block
    (50) else_else_if_statements_block -> . else_if_statement
    (51) else_statement -> . ELSE statements_block
    (52) else_if_statement -> . ELSE if_statement

    COMMENT         reduce using rule 44 (if_statement_block -> if_statement .)
    SEMICOLON       reduce using rule 44 (if_statement_block -> if_statement .)
    CONST           reduce using rule 44 (if_statement_block -> if_statement .)
    RETURN          reduce using rule 44 (if_statement_block -> if_statement .)
    WHILE           reduce using rule 44 (if_statement_block -> if_statement .)
    DO              reduce using rule 44 (if_statement_block -> if_statement .)
    BREAK           reduce using rule 44 (if_statement_block -> if_statement .)
    FOR             reduce using rule 44 (if_statement_block -> if_statement .)
    PRINTF          reduce using rule 44 (if_statement_block -> if_statement .)
    SCANF           reduce using rule 44 (if_statement_block -> if_statement .)
    INT             reduce using rule 44 (if_statement_block -> if_statement .)
    FLOAT           reduce using rule 44 (if_statement_block -> if_statement .)
    DOUBLE          reduce using rule 44 (if_statement_block -> if_statement .)
    CHAR            reduce using rule 44 (if_statement_block -> if_statement .)
    BOOL            reduce using rule 44 (if_statement_block -> if_statement .)
    LONG            reduce using rule 44 (if_statement_block -> if_statement .)
    VOID            reduce using rule 44 (if_statement_block -> if_statement .)
    ID              reduce using rule 44 (if_statement_block -> if_statement .)
    IF              reduce using rule 44 (if_statement_block -> if_statement .)
    INCREMENT       reduce using rule 44 (if_statement_block -> if_statement .)
    DECREMENT       reduce using rule 44 (if_statement_block -> if_statement .)
    R_BRACE         reduce using rule 44 (if_statement_block -> if_statement .)
    ELSE            shift and go to state 178

    else_else_if_statements_block  shift and go to state 175
    else_statement                 shift and go to state 176
    else_if_statement              shift and go to state 177

state 144

    (53) print_statement -> PRINTF . L_BRACKET value_expression R_BRACKET

    L_BRACKET       shift and go to state 179


state 145

    (54) scan_statement -> SCANF . L_BRACKET AMPERSAND ID R_BRACKET

    L_BRACKET       shift and go to state 180


state 146

    (76) assign_expression -> list_element_extraction . assign_op value_expression
    (116) assign_op -> . ASSIGN
    (117) assign_op -> . PLUS_ASSIGN
    (118) assign_op -> . MINUS_ASSIGN
    (119) assign_op -> . MUL_ASSIGN
    (120) assign_op -> . DIV_ASSIGN
    (121) assign_op -> . MOD_ASSIGN

    ASSIGN          shift and go to state 162
    PLUS_ASSIGN     shift and go to state 163
    MINUS_ASSIGN    shift and go to state 164
    MUL_ASSIGN      shift and go to state 165
    DIV_ASSIGN      shift and go to state 166
    MOD_ASSIGN      shift and go to state 167

    assign_op                      shift and go to state 181

state 147

    (77) assign_expression -> unary_op . ID

    ID              shift and go to state 182


state 148

    (46) if_statement -> IF . L_BRACKET logical_expression R_BRACKET statements_block
    (47) if_statement -> IF . L_BRACKET value_expression R_BRACKET statements_block

    L_BRACKET       shift and go to state 183


state 149

    (106) unary_op -> INCREMENT .

    ID              reduce using rule 106 (unary_op -> INCREMENT .)
    SEMICOLON       reduce using rule 106 (unary_op -> INCREMENT .)
    R_BRACKET       reduce using rule 106 (unary_op -> INCREMENT .)


state 150

    (107) unary_op -> DECREMENT .

    ID              reduce using rule 107 (unary_op -> DECREMENT .)
    SEMICOLON       reduce using rule 107 (unary_op -> DECREMENT .)
    R_BRACKET       reduce using rule 107 (unary_op -> DECREMENT .)


state 151

    (73) function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .

    EQUAL           reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    NOT_EQUAL       reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    GREATER         reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    GREATER_EQUAL   reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    LESSER          reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    LESSER_EQUAL    reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    SEMICOLON       reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    R_BRACKET       reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    COMMA           reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    R_BRACE         reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    QUESTION_MARK   reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    AND             reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    OR              reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)
    COLON           reduce using rule 73 (function_expression -> ID L_BRACKET opt_listed_values R_BRACKET .)


state 152

    (98) list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .

    PLUS            reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    MINUS           reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    MUL             reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    DIV             reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    MOD             reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    EQUAL           reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    NOT_EQUAL       reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    GREATER         reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    GREATER_EQUAL   reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    LESSER          reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    LESSER_EQUAL    reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    R_SQUARE_BRACKET reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    SEMICOLON       reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    R_BRACKET       reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    COMMA           reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    R_BRACE         reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    QUESTION_MARK   reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    AND             reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    OR              reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    COLON           reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    ASSIGN          reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    PLUS_ASSIGN     reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    MINUS_ASSIGN    reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    MUL_ASSIGN      reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    DIV_ASSIGN      reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)
    MOD_ASSIGN      reduce using rule 98 (list_element_extraction -> ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET .)


state 153

    (74) trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON . value_expression
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    logical_expression             shift and go to state 50
    value_expression               shift and go to state 184
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 154

    (31) declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .

    COMMENT         reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    PREPROCESSOR_LINE reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    CONST           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    INT             reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    FLOAT           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DOUBLE          reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    CHAR            reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    BOOL            reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    LONG            reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    VOID            reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    $end            reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    SEMICOLON       reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    RETURN          reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    WHILE           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DO              reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    BREAK           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    FOR             reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    PRINTF          reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    SCANF           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    ID              reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    IF              reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    INCREMENT       reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DECREMENT       reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    R_BRACE         reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    NEGATION        reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    L_BRACKET       reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    MINUS           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    INTEGER         reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    DECIMAL         reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    CHARACTER       reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    STRING          reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    TRUE            reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)
    FALSE           reduce using rule 31 (declaration_statement -> CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON .)


state 155

    (99) listed_values -> value_expression COMMA value_expression .
    (99) listed_values -> value_expression . COMMA value_expression
    (100) listed_values -> value_expression . COMMA listed_values
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_BRACE         reduce using rule 99 (listed_values -> value_expression COMMA value_expression .)
    R_BRACKET       reduce using rule 99 (listed_values -> value_expression COMMA value_expression .)
    COMMA           shift and go to state 114
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 156

    (100) listed_values -> value_expression COMMA listed_values .

    R_BRACE         reduce using rule 100 (listed_values -> value_expression COMMA listed_values .)
    R_BRACKET       reduce using rule 100 (listed_values -> value_expression COMMA listed_values .)


state 157

    (16) statements_block -> L_BRACE opt_statements R_BRACE .

    COMMENT         reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    PREPROCESSOR_LINE reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    CONST           reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    INT             reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    FLOAT           reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    DOUBLE          reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    CHAR            reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    BOOL            reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    LONG            reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    VOID            reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    $end            reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    WHILE           reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    SEMICOLON       reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    RETURN          reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    DO              reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    BREAK           reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    FOR             reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    PRINTF          reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    SCANF           reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    ID              reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    IF              reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    INCREMENT       reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    DECREMENT       reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    R_BRACE         reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)
    ELSE            reduce using rule 16 (statements_block -> L_BRACE opt_statements R_BRACE .)


state 158

    (13) statements -> statement statements .

    R_BRACE         reduce using rule 13 (statements -> statement statements .)


state 159

    (28) declaration_statement -> type ID . opt_array_mark SEMICOLON
    (29) declaration_statement -> type ID . opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (123) opt_array_mark -> . array_mark
    (124) opt_array_mark -> . empty
    (122) array_mark -> . L_SQUARE_BRACKET opt_value_expression R_SQUARE_BRACKET
    (131) empty -> .

    L_SQUARE_BRACKET shift and go to state 25
    SEMICOLON       reduce using rule 131 (empty -> .)
    ASSIGN          reduce using rule 131 (empty -> .)

    opt_array_mark                 shift and go to state 21
    array_mark                     shift and go to state 23
    empty                          shift and go to state 24

state 160

    (75) assign_expression -> ID assign_op . value_expression
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    value_expression               shift and go to state 185
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 161

    (78) assign_expression -> ID unary_op .

    SEMICOLON       reduce using rule 78 (assign_expression -> ID unary_op .)
    R_BRACKET       reduce using rule 78 (assign_expression -> ID unary_op .)


state 162

    (116) assign_op -> ASSIGN .

    L_BRACKET       reduce using rule 116 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 116 (assign_op -> ASSIGN .)
    ID              reduce using rule 116 (assign_op -> ASSIGN .)
    INTEGER         reduce using rule 116 (assign_op -> ASSIGN .)
    DECIMAL         reduce using rule 116 (assign_op -> ASSIGN .)
    CHARACTER       reduce using rule 116 (assign_op -> ASSIGN .)
    STRING          reduce using rule 116 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 116 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 116 (assign_op -> ASSIGN .)
    NEGATION        reduce using rule 116 (assign_op -> ASSIGN .)


state 163

    (117) assign_op -> PLUS_ASSIGN .

    L_BRACKET       reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    MINUS           reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    ID              reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    INTEGER         reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    DECIMAL         reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    CHARACTER       reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    STRING          reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    TRUE            reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    FALSE           reduce using rule 117 (assign_op -> PLUS_ASSIGN .)
    NEGATION        reduce using rule 117 (assign_op -> PLUS_ASSIGN .)


state 164

    (118) assign_op -> MINUS_ASSIGN .

    L_BRACKET       reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    MINUS           reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    ID              reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    INTEGER         reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    DECIMAL         reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    CHARACTER       reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    STRING          reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    TRUE            reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    FALSE           reduce using rule 118 (assign_op -> MINUS_ASSIGN .)
    NEGATION        reduce using rule 118 (assign_op -> MINUS_ASSIGN .)


state 165

    (119) assign_op -> MUL_ASSIGN .

    L_BRACKET       reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    MINUS           reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    ID              reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    INTEGER         reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    DECIMAL         reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    CHARACTER       reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    STRING          reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    TRUE            reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    FALSE           reduce using rule 119 (assign_op -> MUL_ASSIGN .)
    NEGATION        reduce using rule 119 (assign_op -> MUL_ASSIGN .)


state 166

    (120) assign_op -> DIV_ASSIGN .

    L_BRACKET       reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    MINUS           reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    ID              reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    INTEGER         reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    DECIMAL         reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    CHARACTER       reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    STRING          reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    TRUE            reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    FALSE           reduce using rule 120 (assign_op -> DIV_ASSIGN .)
    NEGATION        reduce using rule 120 (assign_op -> DIV_ASSIGN .)


state 167

    (121) assign_op -> MOD_ASSIGN .

    L_BRACKET       reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    MINUS           reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    ID              reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    INTEGER         reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    DECIMAL         reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    CHARACTER       reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    STRING          reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    TRUE            reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    FALSE           reduce using rule 121 (assign_op -> MOD_ASSIGN .)
    NEGATION        reduce using rule 121 (assign_op -> MOD_ASSIGN .)


state 168

    (33) assign_statement -> assign_expression SEMICOLON .

    COMMENT         reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    SEMICOLON       reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    CONST           reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    RETURN          reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    WHILE           reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    DO              reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    BREAK           reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    FOR             reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    PRINTF          reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    SCANF           reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    INT             reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    FLOAT           reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    DOUBLE          reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    CHAR            reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    BOOL            reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    LONG            reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    VOID            reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    ID              reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    IF              reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    INCREMENT       reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    DECREMENT       reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)
    R_BRACE         reduce using rule 33 (assign_statement -> assign_expression SEMICOLON .)


state 169

    (34) function_statement -> function_expression SEMICOLON .

    COMMENT         reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    SEMICOLON       reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    CONST           reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    RETURN          reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    WHILE           reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    DO              reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    BREAK           reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    FOR             reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    PRINTF          reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    SCANF           reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    INT             reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    FLOAT           reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    DOUBLE          reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    CHAR            reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    BOOL            reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    LONG            reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    VOID            reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    ID              reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    IF              reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    INCREMENT       reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    DECREMENT       reduce using rule 34 (function_statement -> function_expression SEMICOLON .)
    R_BRACE         reduce using rule 34 (function_statement -> function_expression SEMICOLON .)


state 170

    (35) return_statement -> RETURN value_expression . SEMICOLON
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    SEMICOLON       shift and go to state 186
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 171

    (37) while_loop_statement -> WHILE L_BRACKET . logical_expression R_BRACKET statements_block
    (38) while_loop_statement -> WHILE L_BRACKET . value_expression R_BRACKET statements_block
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    logical_expression             shift and go to state 187
    value_expression               shift and go to state 188
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 172

    (39) do_while_loop_statement -> DO statements_block . WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON
    (40) do_while_loop_statement -> DO statements_block . WHILE L_BRACKET value_expression R_BRACKET SEMICOLON

    WHILE           shift and go to state 189


state 173

    (36) break_statement -> BREAK SEMICOLON .

    COMMENT         reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    CONST           reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    DO              reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    FOR             reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    PRINTF          reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    SCANF           reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    INT             reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    BOOL            reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    LONG            reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    VOID            reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    ID              reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    IF              reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    INCREMENT       reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    DECREMENT       reduce using rule 36 (break_statement -> BREAK SEMICOLON .)
    R_BRACE         reduce using rule 36 (break_statement -> BREAK SEMICOLON .)


state 174

    (41) for_loop_statement -> FOR L_BRACKET . decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block
    (42) decl_stat_or_sem -> . declaration_statement
    (43) decl_stat_or_sem -> . SEMICOLON
    (28) declaration_statement -> . type ID opt_array_mark SEMICOLON
    (29) declaration_statement -> . type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (30) declaration_statement -> . CONST type ID opt_array_mark SEMICOLON
    (31) declaration_statement -> . CONST type ID opt_array_mark ASSIGN declaration_value_expression SEMICOLON
    (83) type -> . INT
    (84) type -> . FLOAT
    (85) type -> . DOUBLE
    (86) type -> . CHAR
    (87) type -> . BOOL
    (88) type -> . LONG
    (89) type -> . VOID

    SEMICOLON       shift and go to state 191
    CONST           shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    BOOL            shift and go to state 15
    LONG            shift and go to state 16
    VOID            shift and go to state 17

    decl_stat_or_sem               shift and go to state 190
    declaration_statement          shift and go to state 192
    type                           shift and go to state 134

state 175

    (45) if_statement_block -> if_statement else_else_if_statements_block .

    COMMENT         reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    SEMICOLON       reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    CONST           reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    RETURN          reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    WHILE           reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    DO              reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    BREAK           reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    FOR             reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    PRINTF          reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    SCANF           reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    INT             reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    FLOAT           reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    DOUBLE          reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    CHAR            reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    BOOL            reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    LONG            reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    VOID            reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    ID              reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    IF              reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    INCREMENT       reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    DECREMENT       reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)
    R_BRACE         reduce using rule 45 (if_statement_block -> if_statement else_else_if_statements_block .)


state 176

    (48) else_else_if_statements_block -> else_statement .

    COMMENT         reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    SEMICOLON       reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    CONST           reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    RETURN          reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    WHILE           reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    DO              reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    BREAK           reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    FOR             reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    PRINTF          reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    SCANF           reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    INT             reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    FLOAT           reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    DOUBLE          reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    CHAR            reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    BOOL            reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    LONG            reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    VOID            reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    ID              reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    IF              reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    INCREMENT       reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    DECREMENT       reduce using rule 48 (else_else_if_statements_block -> else_statement .)
    R_BRACE         reduce using rule 48 (else_else_if_statements_block -> else_statement .)


state 177

    (49) else_else_if_statements_block -> else_if_statement . else_else_if_statements_block
    (50) else_else_if_statements_block -> else_if_statement .
    (48) else_else_if_statements_block -> . else_statement
    (49) else_else_if_statements_block -> . else_if_statement else_else_if_statements_block
    (50) else_else_if_statements_block -> . else_if_statement
    (51) else_statement -> . ELSE statements_block
    (52) else_if_statement -> . ELSE if_statement

    COMMENT         reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    SEMICOLON       reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    CONST           reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    RETURN          reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    WHILE           reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    DO              reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    BREAK           reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    FOR             reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    PRINTF          reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    SCANF           reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    INT             reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    FLOAT           reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    DOUBLE          reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    CHAR            reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    BOOL            reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    LONG            reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    VOID            reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    ID              reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    IF              reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    INCREMENT       reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    DECREMENT       reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    R_BRACE         reduce using rule 50 (else_else_if_statements_block -> else_if_statement .)
    ELSE            shift and go to state 178

    else_if_statement              shift and go to state 177
    else_else_if_statements_block  shift and go to state 193
    else_statement                 shift and go to state 176

state 178

    (51) else_statement -> ELSE . statements_block
    (52) else_if_statement -> ELSE . if_statement
    (16) statements_block -> . L_BRACE opt_statements R_BRACE
    (46) if_statement -> . IF L_BRACKET logical_expression R_BRACKET statements_block
    (47) if_statement -> . IF L_BRACKET value_expression R_BRACKET statements_block

    L_BRACE         shift and go to state 96
    IF              shift and go to state 148

    statements_block               shift and go to state 194
    if_statement                   shift and go to state 195

state 179

    (53) print_statement -> PRINTF L_BRACKET . value_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    value_expression               shift and go to state 196
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49
    logical_expression             shift and go to state 50

state 180

    (54) scan_statement -> SCANF L_BRACKET . AMPERSAND ID R_BRACKET

    AMPERSAND       shift and go to state 197


state 181

    (76) assign_expression -> list_element_extraction assign_op . value_expression
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET

    L_BRACKET       shift and go to state 40
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48
    NEGATION        shift and go to state 51

    list_element_extraction        shift and go to state 49
    value_expression               shift and go to state 198
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    logical_expression             shift and go to state 50

state 182

    (77) assign_expression -> unary_op ID .

    SEMICOLON       reduce using rule 77 (assign_expression -> unary_op ID .)
    R_BRACKET       reduce using rule 77 (assign_expression -> unary_op ID .)


state 183

    (46) if_statement -> IF L_BRACKET . logical_expression R_BRACKET statements_block
    (47) if_statement -> IF L_BRACKET . value_expression R_BRACKET statements_block
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    logical_expression             shift and go to state 199
    value_expression               shift and go to state 200
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 184

    (74) trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESSER resolved as shift
  ! shift/reduce conflict for LESSER_EQUAL resolved as shift
    R_SQUARE_BRACKET reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    SEMICOLON       reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    R_BRACKET       reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    COMMA           reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    R_BRACE         reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    QUESTION_MARK   reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    AND             reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    OR              reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    COLON           reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

  ! EQUAL           [ reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .) ]
  ! NOT_EQUAL       [ reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .) ]
  ! GREATER         [ reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .) ]
  ! LESSER          [ reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .) ]
  ! LESSER_EQUAL    [ reduce using rule 74 (trinary_mark_expression -> logical_expression QUESTION_MARK value_expression COLON value_expression .) ]

    comparison_op                  shift and go to state 59

state 185

    (75) assign_expression -> ID assign_op value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    SEMICOLON       reduce using rule 75 (assign_expression -> ID assign_op value_expression .)
    R_BRACKET       reduce using rule 75 (assign_expression -> ID assign_op value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 186

    (35) return_statement -> RETURN value_expression SEMICOLON .

    COMMENT         reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    SEMICOLON       reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    CONST           reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    RETURN          reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    WHILE           reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    DO              reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    BREAK           reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    FOR             reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    PRINTF          reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    SCANF           reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    INT             reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    FLOAT           reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    DOUBLE          reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    CHAR            reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    BOOL            reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    LONG            reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    VOID            reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    ID              reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    IF              reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    INCREMENT       reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    DECREMENT       reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)
    R_BRACE         reduce using rule 35 (return_statement -> RETURN value_expression SEMICOLON .)


state 187

    (37) while_loop_statement -> WHILE L_BRACKET logical_expression . R_BRACKET statements_block
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

    R_BRACKET       shift and go to state 201
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

    bool_op                        shift and go to state 82

state 188

    (38) while_loop_statement -> WHILE L_BRACKET value_expression . R_BRACKET statements_block
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_BRACKET       shift and go to state 202
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 189

    (39) do_while_loop_statement -> DO statements_block WHILE . L_BRACKET logical_expression R_BRACKET SEMICOLON
    (40) do_while_loop_statement -> DO statements_block WHILE . L_BRACKET value_expression R_BRACKET SEMICOLON

    L_BRACKET       shift and go to state 203


state 190

    (41) for_loop_statement -> FOR L_BRACKET decl_stat_or_sem . opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block
    (79) opt_logical_expression -> . logical_expression
    (80) opt_logical_expression -> . empty
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (131) empty -> .
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    SEMICOLON       reduce using rule 131 (empty -> .)
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    opt_logical_expression         shift and go to state 204
    logical_expression             shift and go to state 205
    empty                          shift and go to state 206
    value_expression               shift and go to state 86
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 191

    (43) decl_stat_or_sem -> SEMICOLON .

    NEGATION        reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    L_BRACKET       reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    MINUS           reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    ID              reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    INTEGER         reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    DECIMAL         reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    CHARACTER       reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    STRING          reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    TRUE            reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    FALSE           reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)
    SEMICOLON       reduce using rule 43 (decl_stat_or_sem -> SEMICOLON .)


state 192

    (42) decl_stat_or_sem -> declaration_statement .

    NEGATION        reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    L_BRACKET       reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    MINUS           reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    ID              reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    INTEGER         reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    DECIMAL         reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    CHARACTER       reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    STRING          reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    TRUE            reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    FALSE           reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)
    SEMICOLON       reduce using rule 42 (decl_stat_or_sem -> declaration_statement .)


state 193

    (49) else_else_if_statements_block -> else_if_statement else_else_if_statements_block .

    COMMENT         reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    SEMICOLON       reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    CONST           reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    RETURN          reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    WHILE           reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    DO              reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    BREAK           reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    FOR             reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    PRINTF          reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    SCANF           reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    INT             reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    FLOAT           reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    DOUBLE          reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    CHAR            reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    BOOL            reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    LONG            reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    VOID            reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    ID              reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    IF              reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    INCREMENT       reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    DECREMENT       reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)
    R_BRACE         reduce using rule 49 (else_else_if_statements_block -> else_if_statement else_else_if_statements_block .)


state 194

    (51) else_statement -> ELSE statements_block .

    COMMENT         reduce using rule 51 (else_statement -> ELSE statements_block .)
    SEMICOLON       reduce using rule 51 (else_statement -> ELSE statements_block .)
    CONST           reduce using rule 51 (else_statement -> ELSE statements_block .)
    RETURN          reduce using rule 51 (else_statement -> ELSE statements_block .)
    WHILE           reduce using rule 51 (else_statement -> ELSE statements_block .)
    DO              reduce using rule 51 (else_statement -> ELSE statements_block .)
    BREAK           reduce using rule 51 (else_statement -> ELSE statements_block .)
    FOR             reduce using rule 51 (else_statement -> ELSE statements_block .)
    PRINTF          reduce using rule 51 (else_statement -> ELSE statements_block .)
    SCANF           reduce using rule 51 (else_statement -> ELSE statements_block .)
    INT             reduce using rule 51 (else_statement -> ELSE statements_block .)
    FLOAT           reduce using rule 51 (else_statement -> ELSE statements_block .)
    DOUBLE          reduce using rule 51 (else_statement -> ELSE statements_block .)
    CHAR            reduce using rule 51 (else_statement -> ELSE statements_block .)
    BOOL            reduce using rule 51 (else_statement -> ELSE statements_block .)
    LONG            reduce using rule 51 (else_statement -> ELSE statements_block .)
    VOID            reduce using rule 51 (else_statement -> ELSE statements_block .)
    ID              reduce using rule 51 (else_statement -> ELSE statements_block .)
    IF              reduce using rule 51 (else_statement -> ELSE statements_block .)
    INCREMENT       reduce using rule 51 (else_statement -> ELSE statements_block .)
    DECREMENT       reduce using rule 51 (else_statement -> ELSE statements_block .)
    R_BRACE         reduce using rule 51 (else_statement -> ELSE statements_block .)


state 195

    (52) else_if_statement -> ELSE if_statement .

    ELSE            reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    COMMENT         reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    SEMICOLON       reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    CONST           reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    RETURN          reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    WHILE           reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    DO              reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    BREAK           reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    FOR             reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    PRINTF          reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    SCANF           reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    INT             reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    FLOAT           reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    DOUBLE          reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    CHAR            reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    BOOL            reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    LONG            reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    VOID            reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    ID              reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    IF              reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    INCREMENT       reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    DECREMENT       reduce using rule 52 (else_if_statement -> ELSE if_statement .)
    R_BRACE         reduce using rule 52 (else_if_statement -> ELSE if_statement .)


state 196

    (53) print_statement -> PRINTF L_BRACKET value_expression . R_BRACKET
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_BRACKET       shift and go to state 207
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 197

    (54) scan_statement -> SCANF L_BRACKET AMPERSAND . ID R_BRACKET

    ID              shift and go to state 208


state 198

    (76) assign_expression -> list_element_extraction assign_op value_expression .
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    SEMICOLON       reduce using rule 76 (assign_expression -> list_element_extraction assign_op value_expression .)
    R_BRACKET       reduce using rule 76 (assign_expression -> list_element_extraction assign_op value_expression .)
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 199

    (46) if_statement -> IF L_BRACKET logical_expression . R_BRACKET statements_block
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

    R_BRACKET       shift and go to state 209
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

    bool_op                        shift and go to state 82

state 200

    (47) if_statement -> IF L_BRACKET value_expression . R_BRACKET statements_block
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_BRACKET       shift and go to state 210
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 201

    (37) while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET . statements_block
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 211

state 202

    (38) while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET . statements_block
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 212

state 203

    (39) do_while_loop_statement -> DO statements_block WHILE L_BRACKET . logical_expression R_BRACKET SEMICOLON
    (40) do_while_loop_statement -> DO statements_block WHILE L_BRACKET . value_expression R_BRACKET SEMICOLON
    (69) logical_expression -> . logical_expression bool_op logical_expression
    (70) logical_expression -> . NEGATION logical_expression
    (71) logical_expression -> . value_expression comparison_op value_expression
    (72) logical_expression -> . L_BRACKET logical_expression R_BRACKET
    (58) value_expression -> . math_expression
    (59) value_expression -> . function_expression
    (60) value_expression -> . value
    (61) value_expression -> . trinary_mark_expression
    (62) value_expression -> . L_BRACKET value_expression R_BRACKET
    (65) math_expression -> . L_BRACKET math_expression R_BRACKET
    (66) math_expression -> . MINUS math_expression
    (67) math_expression -> . MINUS value
    (68) math_expression -> . value math_op value
    (73) function_expression -> . ID L_BRACKET opt_listed_values R_BRACKET
    (90) value -> . INTEGER
    (91) value -> . DECIMAL
    (92) value -> . CHARACTER
    (93) value -> . STRING
    (94) value -> . TRUE
    (95) value -> . FALSE
    (96) value -> . ID
    (97) value -> . list_element_extraction
    (74) trinary_mark_expression -> . logical_expression QUESTION_MARK value_expression COLON value_expression
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET

    NEGATION        shift and go to state 51
    L_BRACKET       shift and go to state 87
    MINUS           shift and go to state 41
    ID              shift and go to state 42
    INTEGER         shift and go to state 43
    DECIMAL         shift and go to state 44
    CHARACTER       shift and go to state 45
    STRING          shift and go to state 46
    TRUE            shift and go to state 47
    FALSE           shift and go to state 48

    logical_expression             shift and go to state 213
    value_expression               shift and go to state 214
    math_expression                shift and go to state 36
    function_expression            shift and go to state 37
    value                          shift and go to state 38
    trinary_mark_expression        shift and go to state 39
    list_element_extraction        shift and go to state 49

state 204

    (41) for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression . SEMICOLON opt_assign_expression R_BRACKET statements_block

    SEMICOLON       shift and go to state 215


state 205

    (79) opt_logical_expression -> logical_expression .
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

    SEMICOLON       reduce using rule 79 (opt_logical_expression -> logical_expression .)
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

    bool_op                        shift and go to state 82

state 206

    (80) opt_logical_expression -> empty .

    SEMICOLON       reduce using rule 80 (opt_logical_expression -> empty .)


state 207

    (53) print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .

    COMMENT         reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    SEMICOLON       reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    CONST           reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    RETURN          reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    WHILE           reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    DO              reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    BREAK           reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    FOR             reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    PRINTF          reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    SCANF           reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    INT             reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    FLOAT           reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    DOUBLE          reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    CHAR            reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    BOOL            reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    LONG            reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    VOID            reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    ID              reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    IF              reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    INCREMENT       reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    DECREMENT       reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)
    R_BRACE         reduce using rule 53 (print_statement -> PRINTF L_BRACKET value_expression R_BRACKET .)


state 208

    (54) scan_statement -> SCANF L_BRACKET AMPERSAND ID . R_BRACKET

    R_BRACKET       shift and go to state 216


state 209

    (46) if_statement -> IF L_BRACKET logical_expression R_BRACKET . statements_block
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 217

state 210

    (47) if_statement -> IF L_BRACKET value_expression R_BRACKET . statements_block
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 218

state 211

    (37) while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .

    COMMENT         reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    SEMICOLON       reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    CONST           reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    RETURN          reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    WHILE           reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    DO              reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    BREAK           reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    FOR             reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    PRINTF          reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    SCANF           reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    INT             reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    FLOAT           reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    DOUBLE          reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    CHAR            reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    BOOL            reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    LONG            reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    VOID            reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    ID              reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    IF              reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    INCREMENT       reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    DECREMENT       reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)
    R_BRACE         reduce using rule 37 (while_loop_statement -> WHILE L_BRACKET logical_expression R_BRACKET statements_block .)


state 212

    (38) while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .

    COMMENT         reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    SEMICOLON       reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    CONST           reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    RETURN          reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    WHILE           reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    DO              reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    BREAK           reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    FOR             reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    PRINTF          reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    SCANF           reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    INT             reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    FLOAT           reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    DOUBLE          reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    CHAR            reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    BOOL            reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    LONG            reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    VOID            reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    ID              reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    IF              reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    INCREMENT       reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    DECREMENT       reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)
    R_BRACE         reduce using rule 38 (while_loop_statement -> WHILE L_BRACKET value_expression R_BRACKET statements_block .)


state 213

    (39) do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression . R_BRACKET SEMICOLON
    (69) logical_expression -> logical_expression . bool_op logical_expression
    (74) trinary_mark_expression -> logical_expression . QUESTION_MARK value_expression COLON value_expression
    (108) bool_op -> . AND
    (109) bool_op -> . OR

    R_BRACKET       shift and go to state 219
    QUESTION_MARK   shift and go to state 81
    AND             shift and go to state 83
    OR              shift and go to state 84

    bool_op                        shift and go to state 82

state 214

    (40) do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression . R_BRACKET SEMICOLON
    (71) logical_expression -> value_expression . comparison_op value_expression
    (110) comparison_op -> . EQUAL
    (111) comparison_op -> . NOT_EQUAL
    (112) comparison_op -> . GREATER
    (113) comparison_op -> . GREATER_EQUAL
    (114) comparison_op -> . LESSER
    (115) comparison_op -> . LESSER_EQUAL

    R_BRACKET       shift and go to state 220
    EQUAL           shift and go to state 60
    NOT_EQUAL       shift and go to state 61
    GREATER         shift and go to state 62
    GREATER_EQUAL   shift and go to state 63
    LESSER          shift and go to state 64
    LESSER_EQUAL    shift and go to state 65

    comparison_op                  shift and go to state 59

state 215

    (41) for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON . opt_assign_expression R_BRACKET statements_block
    (81) opt_assign_expression -> . assign_expression
    (82) opt_assign_expression -> . empty
    (75) assign_expression -> . ID assign_op value_expression
    (76) assign_expression -> . list_element_extraction assign_op value_expression
    (77) assign_expression -> . unary_op ID
    (78) assign_expression -> . ID unary_op
    (131) empty -> .
    (98) list_element_extraction -> . ID L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (106) unary_op -> . INCREMENT
    (107) unary_op -> . DECREMENT

    ID              shift and go to state 224
    R_BRACKET       reduce using rule 131 (empty -> .)
    INCREMENT       shift and go to state 149
    DECREMENT       shift and go to state 150

    opt_assign_expression          shift and go to state 221
    assign_expression              shift and go to state 222
    empty                          shift and go to state 223
    list_element_extraction        shift and go to state 146
    unary_op                       shift and go to state 147

state 216

    (54) scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .

    COMMENT         reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    SEMICOLON       reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    CONST           reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    RETURN          reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    WHILE           reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    DO              reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    BREAK           reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    FOR             reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    PRINTF          reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    SCANF           reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    INT             reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    FLOAT           reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    DOUBLE          reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    CHAR            reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    BOOL            reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    LONG            reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    VOID            reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    ID              reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    IF              reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    INCREMENT       reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    DECREMENT       reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)
    R_BRACE         reduce using rule 54 (scan_statement -> SCANF L_BRACKET AMPERSAND ID R_BRACKET .)


state 217

    (46) if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .

    ELSE            reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    COMMENT         reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    SEMICOLON       reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    CONST           reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    RETURN          reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    WHILE           reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    DO              reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    BREAK           reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    FOR             reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    PRINTF          reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    SCANF           reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    INT             reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    FLOAT           reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    DOUBLE          reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    CHAR            reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    BOOL            reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    LONG            reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    VOID            reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    ID              reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    IF              reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    INCREMENT       reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    DECREMENT       reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)
    R_BRACE         reduce using rule 46 (if_statement -> IF L_BRACKET logical_expression R_BRACKET statements_block .)


state 218

    (47) if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .

    ELSE            reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    COMMENT         reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    SEMICOLON       reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    CONST           reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    RETURN          reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    WHILE           reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    DO              reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    BREAK           reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    FOR             reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    PRINTF          reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    SCANF           reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    INT             reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    FLOAT           reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    DOUBLE          reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    CHAR            reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    BOOL            reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    LONG            reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    VOID            reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    ID              reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    IF              reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    INCREMENT       reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    DECREMENT       reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)
    R_BRACE         reduce using rule 47 (if_statement -> IF L_BRACKET value_expression R_BRACKET statements_block .)


state 219

    (39) do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 225


state 220

    (40) do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 226


state 221

    (41) for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression . R_BRACKET statements_block

    R_BRACKET       shift and go to state 227


state 222

    (81) opt_assign_expression -> assign_expression .

    R_BRACKET       reduce using rule 81 (opt_assign_expression -> assign_expression .)


state 223

    (82) opt_assign_expression -> empty .

    R_BRACKET       reduce using rule 82 (opt_assign_expression -> empty .)


state 224

    (75) assign_expression -> ID . assign_op value_expression
    (78) assign_expression -> ID . unary_op
    (98) list_element_extraction -> ID . L_SQUARE_BRACKET value_expression R_SQUARE_BRACKET
    (116) assign_op -> . ASSIGN
    (117) assign_op -> . PLUS_ASSIGN
    (118) assign_op -> . MINUS_ASSIGN
    (119) assign_op -> . MUL_ASSIGN
    (120) assign_op -> . DIV_ASSIGN
    (121) assign_op -> . MOD_ASSIGN
    (106) unary_op -> . INCREMENT
    (107) unary_op -> . DECREMENT

    L_SQUARE_BRACKET shift and go to state 80
    ASSIGN          shift and go to state 162
    PLUS_ASSIGN     shift and go to state 163
    MINUS_ASSIGN    shift and go to state 164
    MUL_ASSIGN      shift and go to state 165
    DIV_ASSIGN      shift and go to state 166
    MOD_ASSIGN      shift and go to state 167
    INCREMENT       shift and go to state 149
    DECREMENT       shift and go to state 150

    assign_op                      shift and go to state 160
    unary_op                       shift and go to state 161

state 225

    (39) do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .

    COMMENT         reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    CONST           reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    DO              reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    FOR             reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    PRINTF          reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    SCANF           reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    INT             reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    CHAR            reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    BOOL            reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    LONG            reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    VOID            reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    ID              reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    IF              reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    INCREMENT       reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)
    R_BRACE         reduce using rule 39 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET logical_expression R_BRACKET SEMICOLON .)


state 226

    (40) do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .

    COMMENT         reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    CONST           reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    RETURN          reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    WHILE           reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    DO              reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    BREAK           reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    FOR             reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    PRINTF          reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    SCANF           reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    INT             reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    FLOAT           reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    DOUBLE          reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    CHAR            reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    BOOL            reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    LONG            reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    VOID            reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    ID              reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    IF              reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    INCREMENT       reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)
    R_BRACE         reduce using rule 40 (do_while_loop_statement -> DO statements_block WHILE L_BRACKET value_expression R_BRACKET SEMICOLON .)


state 227

    (41) for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET . statements_block
    (16) statements_block -> . L_BRACE opt_statements R_BRACE

    L_BRACE         shift and go to state 96

    statements_block               shift and go to state 228

state 228

    (41) for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .

    COMMENT         reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    SEMICOLON       reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    CONST           reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    RETURN          reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    WHILE           reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    DO              reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    BREAK           reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    FOR             reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    PRINTF          reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    SCANF           reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    INT             reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    FLOAT           reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    DOUBLE          reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    CHAR            reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    BOOL            reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    LONG            reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    VOID            reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    ID              reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    IF              reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    INCREMENT       reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    DECREMENT       reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)
    R_BRACE         reduce using rule 41 (for_loop_statement -> FOR L_BRACKET decl_stat_or_sem opt_logical_expression SEMICOLON opt_assign_expression R_BRACKET statements_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for R_BRACKET in state 73 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 85 resolved as shift
WARNING: shift/reduce conflict for AND in state 85 resolved as shift
WARNING: shift/reduce conflict for OR in state 85 resolved as shift
WARNING: shift/reduce conflict for QUESTION_MARK in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 184 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 184 resolved as shift
WARNING: shift/reduce conflict for LESSER in state 184 resolved as shift
WARNING: shift/reduce conflict for LESSER_EQUAL in state 184 resolved as shift
